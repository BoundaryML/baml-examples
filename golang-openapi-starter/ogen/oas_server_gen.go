// Code generated by ogen, DO NOT EDIT.

package main

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AudioInput implements AudioInput operation.
	//
	// POST /call/AudioInput
	AudioInput(ctx context.Context, req *AudioInputReq) (string, error)
	// ChooseNTools implements ChooseNTools operation.
	//
	// POST /call/ChooseNTools
	ChooseNTools(ctx context.Context, req *ChooseNToolsReq) ([]NilChooseNToolsResponseItem, error)
	// ChooseOneTool implements ChooseOneTool operation.
	//
	// POST /call/ChooseOneTool
	ChooseOneTool(ctx context.Context, req *ChooseOneToolReq) (NilChooseOneToolOK, error)
	// ClassifyConversation implements ClassifyConversation operation.
	//
	// POST /call/ClassifyConversation
	ClassifyConversation(ctx context.Context, req *ClassifyConversationReq) ([]Category, error)
	// ClassifyMessage implements ClassifyMessage operation.
	//
	// POST /call/ClassifyMessage
	ClassifyMessage(ctx context.Context, req *ClassifyMessageReq) (Category, error)
	// ClassifyMessageUsingOllama implements ClassifyMessageUsingOllama operation.
	//
	// POST /call/ClassifyMessageUsingOllama
	ClassifyMessageUsingOllama(ctx context.Context, req *ClassifyMessageUsingOllamaReq) (OCategory, error)
	// ClassifyMessageWithRoles implements ClassifyMessageWithRoles operation.
	//
	// POST /call/ClassifyMessageWithRoles
	ClassifyMessageWithRoles(ctx context.Context, req *ClassifyMessageWithRolesReq) (MyCategory, error)
	// ClassifyMessageWithSymbol implements ClassifyMessageWithSymbol operation.
	//
	// POST /call/ClassifyMessageWithSymbol
	ClassifyMessageWithSymbol(ctx context.Context, req *ClassifyMessageWithSymbolReq) (MyClass, error)
	// DescribeImage implements DescribeImage operation.
	//
	// POST /call/DescribeImage
	DescribeImage(ctx context.Context, req *DescribeImageReq) (*ImageDescription, error)
	// ExtractReceipt implements ExtractReceipt operation.
	//
	// POST /call/ExtractReceipt
	ExtractReceipt(ctx context.Context, req *ExtractReceiptReq) (*Receipt, error)
	// ExtractResume implements ExtractResume operation.
	//
	// POST /call/ExtractResume
	ExtractResume(ctx context.Context, req *ExtractResumeReq) (*Resume, error)
	// ExtractResumeUsingOllama implements ExtractResumeUsingOllama operation.
	//
	// POST /call/ExtractResumeUsingOllama
	ExtractResumeUsingOllama(ctx context.Context, req *ExtractResumeUsingOllamaReq) (*OResume, error)
	// FunctionWithConditionals implements FunctionWithConditionals operation.
	//
	// POST /call/FunctionWithConditionals
	FunctionWithConditionals(ctx context.Context, req *FunctionWithConditionalsReq) (string, error)
	// FunctionWithLoops implements FunctionWithLoops operation.
	//
	// POST /call/FunctionWithLoops
	FunctionWithLoops(ctx context.Context, req *FunctionWithLoopsReq) (string, error)
	// GetOrderInfo implements GetOrderInfo operation.
	//
	// POST /call/GetOrderInfo
	GetOrderInfo(ctx context.Context, req *GetOrderInfoReq) (*OrderInfo, error)
	// UseTool implements UseTool operation.
	//
	// POST /call/UseTool
	UseTool(ctx context.Context, req *UseToolReq) (*WeatherAPI, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
