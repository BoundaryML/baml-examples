// Code generated by ogen, DO NOT EDIT.

package main

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/call/"
			origElem := elem
			if l := len("/call/"); len(elem) >= l && elem[0:l] == "/call/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'A': // Prefix: "AudioInput"
				origElem := elem
				if l := len("AudioInput"); len(elem) >= l && elem[0:l] == "AudioInput" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleAudioInputRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			case 'C': // Prefix: "C"
				origElem := elem
				if l := len("C"); len(elem) >= l && elem[0:l] == "C" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'h': // Prefix: "hoose"
					origElem := elem
					if l := len("hoose"); len(elem) >= l && elem[0:l] == "hoose" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'N': // Prefix: "NTools"
						origElem := elem
						if l := len("NTools"); len(elem) >= l && elem[0:l] == "NTools" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleChooseNToolsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'O': // Prefix: "OneTool"
						origElem := elem
						if l := len("OneTool"); len(elem) >= l && elem[0:l] == "OneTool" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleChooseOneToolRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'l': // Prefix: "lassify"
					origElem := elem
					if l := len("lassify"); len(elem) >= l && elem[0:l] == "lassify" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "Conversation"
						origElem := elem
						if l := len("Conversation"); len(elem) >= l && elem[0:l] == "Conversation" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleClassifyConversationRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'M': // Prefix: "Message"
						origElem := elem
						if l := len("Message"); len(elem) >= l && elem[0:l] == "Message" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleClassifyMessageRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case 'U': // Prefix: "UsingOllama"
							origElem := elem
							if l := len("UsingOllama"); len(elem) >= l && elem[0:l] == "UsingOllama" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleClassifyMessageUsingOllamaRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'W': // Prefix: "With"
							origElem := elem
							if l := len("With"); len(elem) >= l && elem[0:l] == "With" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'R': // Prefix: "Roles"
								origElem := elem
								if l := len("Roles"); len(elem) >= l && elem[0:l] == "Roles" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleClassifyMessageWithRolesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 'S': // Prefix: "Symbol"
								origElem := elem
								if l := len("Symbol"); len(elem) >= l && elem[0:l] == "Symbol" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleClassifyMessageWithSymbolRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'D': // Prefix: "DescribeImage"
				origElem := elem
				if l := len("DescribeImage"); len(elem) >= l && elem[0:l] == "DescribeImage" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleDescribeImageRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			case 'E': // Prefix: "ExtractRe"
				origElem := elem
				if l := len("ExtractRe"); len(elem) >= l && elem[0:l] == "ExtractRe" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ceipt"
					origElem := elem
					if l := len("ceipt"); len(elem) >= l && elem[0:l] == "ceipt" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleExtractReceiptRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 's': // Prefix: "sume"
					origElem := elem
					if l := len("sume"); len(elem) >= l && elem[0:l] == "sume" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleExtractResumeRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case 'U': // Prefix: "UsingOllama"
						origElem := elem
						if l := len("UsingOllama"); len(elem) >= l && elem[0:l] == "UsingOllama" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleExtractResumeUsingOllamaRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'F': // Prefix: "FunctionWith"
				origElem := elem
				if l := len("FunctionWith"); len(elem) >= l && elem[0:l] == "FunctionWith" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'C': // Prefix: "Conditionals"
					origElem := elem
					if l := len("Conditionals"); len(elem) >= l && elem[0:l] == "Conditionals" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleFunctionWithConditionalsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 'L': // Prefix: "Loops"
					origElem := elem
					if l := len("Loops"); len(elem) >= l && elem[0:l] == "Loops" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleFunctionWithLoopsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'G': // Prefix: "GetOrderInfo"
				origElem := elem
				if l := len("GetOrderInfo"); len(elem) >= l && elem[0:l] == "GetOrderInfo" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleGetOrderInfoRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			case 'U': // Prefix: "UseTool"
				origElem := elem
				if l := len("UseTool"); len(elem) >= l && elem[0:l] == "UseTool" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleUseToolRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/call/"
			origElem := elem
			if l := len("/call/"); len(elem) >= l && elem[0:l] == "/call/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'A': // Prefix: "AudioInput"
				origElem := elem
				if l := len("AudioInput"); len(elem) >= l && elem[0:l] == "AudioInput" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = "AudioInput"
						r.summary = ""
						r.operationID = "AudioInput"
						r.pathPattern = "/call/AudioInput"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'C': // Prefix: "C"
				origElem := elem
				if l := len("C"); len(elem) >= l && elem[0:l] == "C" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'h': // Prefix: "hoose"
					origElem := elem
					if l := len("hoose"); len(elem) >= l && elem[0:l] == "hoose" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'N': // Prefix: "NTools"
						origElem := elem
						if l := len("NTools"); len(elem) >= l && elem[0:l] == "NTools" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "ChooseNTools"
								r.summary = ""
								r.operationID = "ChooseNTools"
								r.pathPattern = "/call/ChooseNTools"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'O': // Prefix: "OneTool"
						origElem := elem
						if l := len("OneTool"); len(elem) >= l && elem[0:l] == "OneTool" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "ChooseOneTool"
								r.summary = ""
								r.operationID = "ChooseOneTool"
								r.pathPattern = "/call/ChooseOneTool"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'l': // Prefix: "lassify"
					origElem := elem
					if l := len("lassify"); len(elem) >= l && elem[0:l] == "lassify" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "Conversation"
						origElem := elem
						if l := len("Conversation"); len(elem) >= l && elem[0:l] == "Conversation" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "ClassifyConversation"
								r.summary = ""
								r.operationID = "ClassifyConversation"
								r.pathPattern = "/call/ClassifyConversation"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'M': // Prefix: "Message"
						origElem := elem
						if l := len("Message"); len(elem) >= l && elem[0:l] == "Message" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "ClassifyMessage"
								r.summary = ""
								r.operationID = "ClassifyMessage"
								r.pathPattern = "/call/ClassifyMessage"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case 'U': // Prefix: "UsingOllama"
							origElem := elem
							if l := len("UsingOllama"); len(elem) >= l && elem[0:l] == "UsingOllama" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "ClassifyMessageUsingOllama"
									r.summary = ""
									r.operationID = "ClassifyMessageUsingOllama"
									r.pathPattern = "/call/ClassifyMessageUsingOllama"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'W': // Prefix: "With"
							origElem := elem
							if l := len("With"); len(elem) >= l && elem[0:l] == "With" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'R': // Prefix: "Roles"
								origElem := elem
								if l := len("Roles"); len(elem) >= l && elem[0:l] == "Roles" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ClassifyMessageWithRoles"
										r.summary = ""
										r.operationID = "ClassifyMessageWithRoles"
										r.pathPattern = "/call/ClassifyMessageWithRoles"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'S': // Prefix: "Symbol"
								origElem := elem
								if l := len("Symbol"); len(elem) >= l && elem[0:l] == "Symbol" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ClassifyMessageWithSymbol"
										r.summary = ""
										r.operationID = "ClassifyMessageWithSymbol"
										r.pathPattern = "/call/ClassifyMessageWithSymbol"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'D': // Prefix: "DescribeImage"
				origElem := elem
				if l := len("DescribeImage"); len(elem) >= l && elem[0:l] == "DescribeImage" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = "DescribeImage"
						r.summary = ""
						r.operationID = "DescribeImage"
						r.pathPattern = "/call/DescribeImage"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'E': // Prefix: "ExtractRe"
				origElem := elem
				if l := len("ExtractRe"); len(elem) >= l && elem[0:l] == "ExtractRe" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ceipt"
					origElem := elem
					if l := len("ceipt"); len(elem) >= l && elem[0:l] == "ceipt" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "ExtractReceipt"
							r.summary = ""
							r.operationID = "ExtractReceipt"
							r.pathPattern = "/call/ExtractReceipt"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 's': // Prefix: "sume"
					origElem := elem
					if l := len("sume"); len(elem) >= l && elem[0:l] == "sume" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = "ExtractResume"
							r.summary = ""
							r.operationID = "ExtractResume"
							r.pathPattern = "/call/ExtractResume"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case 'U': // Prefix: "UsingOllama"
						origElem := elem
						if l := len("UsingOllama"); len(elem) >= l && elem[0:l] == "UsingOllama" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "ExtractResumeUsingOllama"
								r.summary = ""
								r.operationID = "ExtractResumeUsingOllama"
								r.pathPattern = "/call/ExtractResumeUsingOllama"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'F': // Prefix: "FunctionWith"
				origElem := elem
				if l := len("FunctionWith"); len(elem) >= l && elem[0:l] == "FunctionWith" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'C': // Prefix: "Conditionals"
					origElem := elem
					if l := len("Conditionals"); len(elem) >= l && elem[0:l] == "Conditionals" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "FunctionWithConditionals"
							r.summary = ""
							r.operationID = "FunctionWithConditionals"
							r.pathPattern = "/call/FunctionWithConditionals"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'L': // Prefix: "Loops"
					origElem := elem
					if l := len("Loops"); len(elem) >= l && elem[0:l] == "Loops" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "FunctionWithLoops"
							r.summary = ""
							r.operationID = "FunctionWithLoops"
							r.pathPattern = "/call/FunctionWithLoops"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'G': // Prefix: "GetOrderInfo"
				origElem := elem
				if l := len("GetOrderInfo"); len(elem) >= l && elem[0:l] == "GetOrderInfo" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = "GetOrderInfo"
						r.summary = ""
						r.operationID = "GetOrderInfo"
						r.pathPattern = "/call/GetOrderInfo"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'U': // Prefix: "UseTool"
				origElem := elem
				if l := len("UseTool"); len(elem) >= l && elem[0:l] == "UseTool" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = "UseTool"
						r.summary = ""
						r.operationID = "UseTool"
						r.pathPattern = "/call/UseTool"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
