// Code generated by ogen, DO NOT EDIT.

package main

import (
	"github.com/go-faster/errors"
)

type AudioInputReq struct {
	AudioInput BamlAudio `json:"audioInput"`
}

// GetAudioInput returns the value of AudioInput.
func (s *AudioInputReq) GetAudioInput() BamlAudio {
	return s.AudioInput
}

// SetAudioInput sets the value of AudioInput.
func (s *AudioInputReq) SetAudioInput(val BamlAudio) {
	s.AudioInput = val
}

// Ref: #/components/schemas/BamlAudio
// BamlAudio represents sum type.
type BamlAudio struct {
	Type       BamlAudioType // switch on this field
	BamlAudio0 BamlAudio0
	BamlAudio1 BamlAudio1
}

// BamlAudioType is oneOf type of BamlAudio.
type BamlAudioType string

// Possible values for BamlAudioType.
const (
	BamlAudio0BamlAudio BamlAudioType = "BamlAudio0"
	BamlAudio1BamlAudio BamlAudioType = "BamlAudio1"
)

// IsBamlAudio0 reports whether BamlAudio is BamlAudio0.
func (s BamlAudio) IsBamlAudio0() bool { return s.Type == BamlAudio0BamlAudio }

// IsBamlAudio1 reports whether BamlAudio is BamlAudio1.
func (s BamlAudio) IsBamlAudio1() bool { return s.Type == BamlAudio1BamlAudio }

// SetBamlAudio0 sets BamlAudio to BamlAudio0.
func (s *BamlAudio) SetBamlAudio0(v BamlAudio0) {
	s.Type = BamlAudio0BamlAudio
	s.BamlAudio0 = v
}

// GetBamlAudio0 returns BamlAudio0 and true boolean if BamlAudio is BamlAudio0.
func (s BamlAudio) GetBamlAudio0() (v BamlAudio0, ok bool) {
	if !s.IsBamlAudio0() {
		return v, false
	}
	return s.BamlAudio0, true
}

// NewBamlAudio0BamlAudio returns new BamlAudio from BamlAudio0.
func NewBamlAudio0BamlAudio(v BamlAudio0) BamlAudio {
	var s BamlAudio
	s.SetBamlAudio0(v)
	return s
}

// SetBamlAudio1 sets BamlAudio to BamlAudio1.
func (s *BamlAudio) SetBamlAudio1(v BamlAudio1) {
	s.Type = BamlAudio1BamlAudio
	s.BamlAudio1 = v
}

// GetBamlAudio1 returns BamlAudio1 and true boolean if BamlAudio is BamlAudio1.
func (s BamlAudio) GetBamlAudio1() (v BamlAudio1, ok bool) {
	if !s.IsBamlAudio1() {
		return v, false
	}
	return s.BamlAudio1, true
}

// NewBamlAudio1BamlAudio returns new BamlAudio from BamlAudio1.
func NewBamlAudio1BamlAudio(v BamlAudio1) BamlAudio {
	var s BamlAudio
	s.SetBamlAudio1(v)
	return s
}

type BamlAudio0 struct {
	Base64    OptString    `json:"base64"`
	MediaType OptNilString `json:"media_type"`
}

// GetBase64 returns the value of Base64.
func (s *BamlAudio0) GetBase64() OptString {
	return s.Base64
}

// GetMediaType returns the value of MediaType.
func (s *BamlAudio0) GetMediaType() OptNilString {
	return s.MediaType
}

// SetBase64 sets the value of Base64.
func (s *BamlAudio0) SetBase64(val OptString) {
	s.Base64 = val
}

// SetMediaType sets the value of MediaType.
func (s *BamlAudio0) SetMediaType(val OptNilString) {
	s.MediaType = val
}

type BamlAudio1 struct {
	URL       OptString    `json:"url"`
	MediaType OptNilString `json:"media_type"`
}

// GetURL returns the value of URL.
func (s *BamlAudio1) GetURL() OptString {
	return s.URL
}

// GetMediaType returns the value of MediaType.
func (s *BamlAudio1) GetMediaType() OptNilString {
	return s.MediaType
}

// SetURL sets the value of URL.
func (s *BamlAudio1) SetURL(val OptString) {
	s.URL = val
}

// SetMediaType sets the value of MediaType.
func (s *BamlAudio1) SetMediaType(val OptNilString) {
	s.MediaType = val
}

// Ref: #/components/schemas/BamlImage
// BamlImage represents sum type.
type BamlImage struct {
	Type       BamlImageType // switch on this field
	BamlImage0 BamlImage0
	BamlImage1 BamlImage1
}

// BamlImageType is oneOf type of BamlImage.
type BamlImageType string

// Possible values for BamlImageType.
const (
	BamlImage0BamlImage BamlImageType = "BamlImage0"
	BamlImage1BamlImage BamlImageType = "BamlImage1"
)

// IsBamlImage0 reports whether BamlImage is BamlImage0.
func (s BamlImage) IsBamlImage0() bool { return s.Type == BamlImage0BamlImage }

// IsBamlImage1 reports whether BamlImage is BamlImage1.
func (s BamlImage) IsBamlImage1() bool { return s.Type == BamlImage1BamlImage }

// SetBamlImage0 sets BamlImage to BamlImage0.
func (s *BamlImage) SetBamlImage0(v BamlImage0) {
	s.Type = BamlImage0BamlImage
	s.BamlImage0 = v
}

// GetBamlImage0 returns BamlImage0 and true boolean if BamlImage is BamlImage0.
func (s BamlImage) GetBamlImage0() (v BamlImage0, ok bool) {
	if !s.IsBamlImage0() {
		return v, false
	}
	return s.BamlImage0, true
}

// NewBamlImage0BamlImage returns new BamlImage from BamlImage0.
func NewBamlImage0BamlImage(v BamlImage0) BamlImage {
	var s BamlImage
	s.SetBamlImage0(v)
	return s
}

// SetBamlImage1 sets BamlImage to BamlImage1.
func (s *BamlImage) SetBamlImage1(v BamlImage1) {
	s.Type = BamlImage1BamlImage
	s.BamlImage1 = v
}

// GetBamlImage1 returns BamlImage1 and true boolean if BamlImage is BamlImage1.
func (s BamlImage) GetBamlImage1() (v BamlImage1, ok bool) {
	if !s.IsBamlImage1() {
		return v, false
	}
	return s.BamlImage1, true
}

// NewBamlImage1BamlImage returns new BamlImage from BamlImage1.
func NewBamlImage1BamlImage(v BamlImage1) BamlImage {
	var s BamlImage
	s.SetBamlImage1(v)
	return s
}

type BamlImage0 struct {
	Base64    OptString    `json:"base64"`
	MediaType OptNilString `json:"media_type"`
}

// GetBase64 returns the value of Base64.
func (s *BamlImage0) GetBase64() OptString {
	return s.Base64
}

// GetMediaType returns the value of MediaType.
func (s *BamlImage0) GetMediaType() OptNilString {
	return s.MediaType
}

// SetBase64 sets the value of Base64.
func (s *BamlImage0) SetBase64(val OptString) {
	s.Base64 = val
}

// SetMediaType sets the value of MediaType.
func (s *BamlImage0) SetMediaType(val OptNilString) {
	s.MediaType = val
}

type BamlImage1 struct {
	URL       OptString    `json:"url"`
	MediaType OptNilString `json:"media_type"`
}

// GetURL returns the value of URL.
func (s *BamlImage1) GetURL() OptString {
	return s.URL
}

// GetMediaType returns the value of MediaType.
func (s *BamlImage1) GetMediaType() OptNilString {
	return s.MediaType
}

// SetURL sets the value of URL.
func (s *BamlImage1) SetURL(val OptString) {
	s.URL = val
}

// SetMediaType sets the value of MediaType.
func (s *BamlImage1) SetMediaType(val OptNilString) {
	s.MediaType = val
}

// Ref: #/components/schemas/Category
type Category string

const (
	CategoryRefund           Category = "Refund"
	CategoryCancelOrder      Category = "CancelOrder"
	CategoryTechnicalSupport Category = "TechnicalSupport"
	CategoryAccountIssue     Category = "AccountIssue"
	CategoryQuestion         Category = "Question"
)

// AllValues returns all Category values.
func (Category) AllValues() []Category {
	return []Category{
		CategoryRefund,
		CategoryCancelOrder,
		CategoryTechnicalSupport,
		CategoryAccountIssue,
		CategoryQuestion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Category) MarshalText() ([]byte, error) {
	switch s {
	case CategoryRefund:
		return []byte(s), nil
	case CategoryCancelOrder:
		return []byte(s), nil
	case CategoryTechnicalSupport:
		return []byte(s), nil
	case CategoryAccountIssue:
		return []byte(s), nil
	case CategoryQuestion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Category) UnmarshalText(data []byte) error {
	switch Category(data) {
	case CategoryRefund:
		*s = CategoryRefund
		return nil
	case CategoryCancelOrder:
		*s = CategoryCancelOrder
		return nil
	case CategoryTechnicalSupport:
		*s = CategoryTechnicalSupport
		return nil
	case CategoryAccountIssue:
		*s = CategoryAccountIssue
		return nil
	case CategoryQuestion:
		*s = CategoryQuestion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ChooseNToolsReq struct {
	UserMessage string `json:"user_message"`
}

// GetUserMessage returns the value of UserMessage.
func (s *ChooseNToolsReq) GetUserMessage() string {
	return s.UserMessage
}

// SetUserMessage sets the value of UserMessage.
func (s *ChooseNToolsReq) SetUserMessage(val string) {
	s.UserMessage = val
}

// ChooseNToolsResponseItem represents sum type.
type ChooseNToolsResponseItem struct {
	Type        ChooseNToolsResponseItemType // switch on this field
	WeatherAPI2 WeatherAPI2
	SendEmail   SendEmail
}

// ChooseNToolsResponseItemType is oneOf type of ChooseNToolsResponseItem.
type ChooseNToolsResponseItemType string

// Possible values for ChooseNToolsResponseItemType.
const (
	WeatherAPI2ChooseNToolsResponseItem ChooseNToolsResponseItemType = "WeatherAPI2"
	SendEmailChooseNToolsResponseItem   ChooseNToolsResponseItemType = "SendEmail"
)

// IsWeatherAPI2 reports whether ChooseNToolsResponseItem is WeatherAPI2.
func (s ChooseNToolsResponseItem) IsWeatherAPI2() bool {
	return s.Type == WeatherAPI2ChooseNToolsResponseItem
}

// IsSendEmail reports whether ChooseNToolsResponseItem is SendEmail.
func (s ChooseNToolsResponseItem) IsSendEmail() bool {
	return s.Type == SendEmailChooseNToolsResponseItem
}

// SetWeatherAPI2 sets ChooseNToolsResponseItem to WeatherAPI2.
func (s *ChooseNToolsResponseItem) SetWeatherAPI2(v WeatherAPI2) {
	s.Type = WeatherAPI2ChooseNToolsResponseItem
	s.WeatherAPI2 = v
}

// GetWeatherAPI2 returns WeatherAPI2 and true boolean if ChooseNToolsResponseItem is WeatherAPI2.
func (s ChooseNToolsResponseItem) GetWeatherAPI2() (v WeatherAPI2, ok bool) {
	if !s.IsWeatherAPI2() {
		return v, false
	}
	return s.WeatherAPI2, true
}

// NewWeatherAPI2ChooseNToolsResponseItem returns new ChooseNToolsResponseItem from WeatherAPI2.
func NewWeatherAPI2ChooseNToolsResponseItem(v WeatherAPI2) ChooseNToolsResponseItem {
	var s ChooseNToolsResponseItem
	s.SetWeatherAPI2(v)
	return s
}

// SetSendEmail sets ChooseNToolsResponseItem to SendEmail.
func (s *ChooseNToolsResponseItem) SetSendEmail(v SendEmail) {
	s.Type = SendEmailChooseNToolsResponseItem
	s.SendEmail = v
}

// GetSendEmail returns SendEmail and true boolean if ChooseNToolsResponseItem is SendEmail.
func (s ChooseNToolsResponseItem) GetSendEmail() (v SendEmail, ok bool) {
	if !s.IsSendEmail() {
		return v, false
	}
	return s.SendEmail, true
}

// NewSendEmailChooseNToolsResponseItem returns new ChooseNToolsResponseItem from SendEmail.
func NewSendEmailChooseNToolsResponseItem(v SendEmail) ChooseNToolsResponseItem {
	var s ChooseNToolsResponseItem
	s.SetSendEmail(v)
	return s
}

// ChooseOneToolOK represents sum type.
type ChooseOneToolOK struct {
	Type        ChooseOneToolOKType // switch on this field
	WeatherAPI2 WeatherAPI2
	SendEmail   SendEmail
}

// ChooseOneToolOKType is oneOf type of ChooseOneToolOK.
type ChooseOneToolOKType string

// Possible values for ChooseOneToolOKType.
const (
	WeatherAPI2ChooseOneToolOK ChooseOneToolOKType = "WeatherAPI2"
	SendEmailChooseOneToolOK   ChooseOneToolOKType = "SendEmail"
)

// IsWeatherAPI2 reports whether ChooseOneToolOK is WeatherAPI2.
func (s ChooseOneToolOK) IsWeatherAPI2() bool { return s.Type == WeatherAPI2ChooseOneToolOK }

// IsSendEmail reports whether ChooseOneToolOK is SendEmail.
func (s ChooseOneToolOK) IsSendEmail() bool { return s.Type == SendEmailChooseOneToolOK }

// SetWeatherAPI2 sets ChooseOneToolOK to WeatherAPI2.
func (s *ChooseOneToolOK) SetWeatherAPI2(v WeatherAPI2) {
	s.Type = WeatherAPI2ChooseOneToolOK
	s.WeatherAPI2 = v
}

// GetWeatherAPI2 returns WeatherAPI2 and true boolean if ChooseOneToolOK is WeatherAPI2.
func (s ChooseOneToolOK) GetWeatherAPI2() (v WeatherAPI2, ok bool) {
	if !s.IsWeatherAPI2() {
		return v, false
	}
	return s.WeatherAPI2, true
}

// NewWeatherAPI2ChooseOneToolOK returns new ChooseOneToolOK from WeatherAPI2.
func NewWeatherAPI2ChooseOneToolOK(v WeatherAPI2) ChooseOneToolOK {
	var s ChooseOneToolOK
	s.SetWeatherAPI2(v)
	return s
}

// SetSendEmail sets ChooseOneToolOK to SendEmail.
func (s *ChooseOneToolOK) SetSendEmail(v SendEmail) {
	s.Type = SendEmailChooseOneToolOK
	s.SendEmail = v
}

// GetSendEmail returns SendEmail and true boolean if ChooseOneToolOK is SendEmail.
func (s ChooseOneToolOK) GetSendEmail() (v SendEmail, ok bool) {
	if !s.IsSendEmail() {
		return v, false
	}
	return s.SendEmail, true
}

// NewSendEmailChooseOneToolOK returns new ChooseOneToolOK from SendEmail.
func NewSendEmailChooseOneToolOK(v SendEmail) ChooseOneToolOK {
	var s ChooseOneToolOK
	s.SetSendEmail(v)
	return s
}

type ChooseOneToolReq struct {
	UserMessage string `json:"user_message"`
}

// GetUserMessage returns the value of UserMessage.
func (s *ChooseOneToolReq) GetUserMessage() string {
	return s.UserMessage
}

// SetUserMessage sets the value of UserMessage.
func (s *ChooseOneToolReq) SetUserMessage(val string) {
	s.UserMessage = val
}

type ClassifyConversationReq struct {
	Messages []UserMessage `json:"messages"`
}

// GetMessages returns the value of Messages.
func (s *ClassifyConversationReq) GetMessages() []UserMessage {
	return s.Messages
}

// SetMessages sets the value of Messages.
func (s *ClassifyConversationReq) SetMessages(val []UserMessage) {
	s.Messages = val
}

type ClassifyMessageReq struct {
	Message Message `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ClassifyMessageReq) GetMessage() Message {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ClassifyMessageReq) SetMessage(val Message) {
	s.Message = val
}

type ClassifyMessageUsingOllamaReq struct {
	Message OMessage `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ClassifyMessageUsingOllamaReq) GetMessage() OMessage {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ClassifyMessageUsingOllamaReq) SetMessage(val OMessage) {
	s.Message = val
}

type ClassifyMessageWithRolesReq struct {
	Input string `json:"input"`
}

// GetInput returns the value of Input.
func (s *ClassifyMessageWithRolesReq) GetInput() string {
	return s.Input
}

// SetInput sets the value of Input.
func (s *ClassifyMessageWithRolesReq) SetInput(val string) {
	s.Input = val
}

type ClassifyMessageWithSymbolReq struct {
	Input string `json:"input"`
}

// GetInput returns the value of Input.
func (s *ClassifyMessageWithSymbolReq) GetInput() string {
	return s.Input
}

// SetInput sets the value of Input.
func (s *ClassifyMessageWithSymbolReq) SetInput(val string) {
	s.Input = val
}

type DescribeImageReq struct {
	MyImage BamlImage `json:"myImage"`
}

// GetMyImage returns the value of MyImage.
func (s *DescribeImageReq) GetMyImage() BamlImage {
	return s.MyImage
}

// SetMyImage sets the value of MyImage.
func (s *DescribeImageReq) SetMyImage(val BamlImage) {
	s.MyImage = val
}

// Ref: #/components/schemas/Education
type Education struct {
	School string `json:"school"`
	Degree string `json:"degree"`
	Year   int    `json:"year"`
}

// GetSchool returns the value of School.
func (s *Education) GetSchool() string {
	return s.School
}

// GetDegree returns the value of Degree.
func (s *Education) GetDegree() string {
	return s.Degree
}

// GetYear returns the value of Year.
func (s *Education) GetYear() int {
	return s.Year
}

// SetSchool sets the value of School.
func (s *Education) SetSchool(val string) {
	s.School = val
}

// SetDegree sets the value of Degree.
func (s *Education) SetDegree(val string) {
	s.Degree = val
}

// SetYear sets the value of Year.
func (s *Education) SetYear(val int) {
	s.Year = val
}

// Ref: #/components/schemas/Email
type Email struct {
	Subject     string `json:"subject"`
	Body        string `json:"body"`
	FromAddress string `json:"from_address"`
}

// GetSubject returns the value of Subject.
func (s *Email) GetSubject() string {
	return s.Subject
}

// GetBody returns the value of Body.
func (s *Email) GetBody() string {
	return s.Body
}

// GetFromAddress returns the value of FromAddress.
func (s *Email) GetFromAddress() string {
	return s.FromAddress
}

// SetSubject sets the value of Subject.
func (s *Email) SetSubject(val string) {
	s.Subject = val
}

// SetBody sets the value of Body.
func (s *Email) SetBody(val string) {
	s.Body = val
}

// SetFromAddress sets the value of FromAddress.
func (s *Email) SetFromAddress(val string) {
	s.FromAddress = val
}

type ExtractReceiptReq struct {
	Receipt NilExtractReceiptReqReceipt `json:"receipt"`
}

// GetReceipt returns the value of Receipt.
func (s *ExtractReceiptReq) GetReceipt() NilExtractReceiptReqReceipt {
	return s.Receipt
}

// SetReceipt sets the value of Receipt.
func (s *ExtractReceiptReq) SetReceipt(val NilExtractReceiptReqReceipt) {
	s.Receipt = val
}

// ExtractReceiptReqReceipt represents sum type.
type ExtractReceiptReqReceipt struct {
	Type      ExtractReceiptReqReceiptType // switch on this field
	BamlImage BamlImage
	String    string
}

// ExtractReceiptReqReceiptType is oneOf type of ExtractReceiptReqReceipt.
type ExtractReceiptReqReceiptType string

// Possible values for ExtractReceiptReqReceiptType.
const (
	BamlImageExtractReceiptReqReceipt ExtractReceiptReqReceiptType = "BamlImage"
	StringExtractReceiptReqReceipt    ExtractReceiptReqReceiptType = "string"
)

// IsBamlImage reports whether ExtractReceiptReqReceipt is BamlImage.
func (s ExtractReceiptReqReceipt) IsBamlImage() bool {
	return s.Type == BamlImageExtractReceiptReqReceipt
}

// IsString reports whether ExtractReceiptReqReceipt is string.
func (s ExtractReceiptReqReceipt) IsString() bool { return s.Type == StringExtractReceiptReqReceipt }

// SetBamlImage sets ExtractReceiptReqReceipt to BamlImage.
func (s *ExtractReceiptReqReceipt) SetBamlImage(v BamlImage) {
	s.Type = BamlImageExtractReceiptReqReceipt
	s.BamlImage = v
}

// GetBamlImage returns BamlImage and true boolean if ExtractReceiptReqReceipt is BamlImage.
func (s ExtractReceiptReqReceipt) GetBamlImage() (v BamlImage, ok bool) {
	if !s.IsBamlImage() {
		return v, false
	}
	return s.BamlImage, true
}

// NewBamlImageExtractReceiptReqReceipt returns new ExtractReceiptReqReceipt from BamlImage.
func NewBamlImageExtractReceiptReqReceipt(v BamlImage) ExtractReceiptReqReceipt {
	var s ExtractReceiptReqReceipt
	s.SetBamlImage(v)
	return s
}

// SetString sets ExtractReceiptReqReceipt to string.
func (s *ExtractReceiptReqReceipt) SetString(v string) {
	s.Type = StringExtractReceiptReqReceipt
	s.String = v
}

// GetString returns string and true boolean if ExtractReceiptReqReceipt is string.
func (s ExtractReceiptReqReceipt) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringExtractReceiptReqReceipt returns new ExtractReceiptReqReceipt from string.
func NewStringExtractReceiptReqReceipt(v string) ExtractReceiptReqReceipt {
	var s ExtractReceiptReqReceipt
	s.SetString(v)
	return s
}

type ExtractResumeReq struct {
	ResumeText string `json:"resume_text"`
}

// GetResumeText returns the value of ResumeText.
func (s *ExtractResumeReq) GetResumeText() string {
	return s.ResumeText
}

// SetResumeText sets the value of ResumeText.
func (s *ExtractResumeReq) SetResumeText(val string) {
	s.ResumeText = val
}

type ExtractResumeUsingOllamaReq struct {
	ResumeText string `json:"resume_text"`
}

// GetResumeText returns the value of ResumeText.
func (s *ExtractResumeUsingOllamaReq) GetResumeText() string {
	return s.ResumeText
}

// SetResumeText sets the value of ResumeText.
func (s *ExtractResumeUsingOllamaReq) SetResumeText(val string) {
	s.ResumeText = val
}

type FunctionWithConditionalsReq struct {
	User User `json:"user"`
}

// GetUser returns the value of User.
func (s *FunctionWithConditionalsReq) GetUser() User {
	return s.User
}

// SetUser sets the value of User.
func (s *FunctionWithConditionalsReq) SetUser(val User) {
	s.User = val
}

type FunctionWithLoopsReq struct {
	Messages []MyUserMessage `json:"messages"`
}

// GetMessages returns the value of Messages.
func (s *FunctionWithLoopsReq) GetMessages() []MyUserMessage {
	return s.Messages
}

// SetMessages sets the value of Messages.
func (s *FunctionWithLoopsReq) SetMessages(val []MyUserMessage) {
	s.Messages = val
}

type GetOrderInfoReq struct {
	Email Email `json:"email"`
}

// GetEmail returns the value of Email.
func (s *GetOrderInfoReq) GetEmail() Email {
	return s.Email
}

// SetEmail sets the value of Email.
func (s *GetOrderInfoReq) SetEmail(val Email) {
	s.Email = val
}

// Ref: #/components/schemas/ImageDescription
type ImageDescription struct {
	Description string   `json:"description"`
	Tags        []string `json:"tags"`
}

// GetDescription returns the value of Description.
func (s *ImageDescription) GetDescription() string {
	return s.Description
}

// GetTags returns the value of Tags.
func (s *ImageDescription) GetTags() []string {
	return s.Tags
}

// SetDescription sets the value of Description.
func (s *ImageDescription) SetDescription(val string) {
	s.Description = val
}

// SetTags sets the value of Tags.
func (s *ImageDescription) SetTags(val []string) {
	s.Tags = val
}

// Ref: #/components/schemas/Item
type Item struct {
	Name     string  `json:"name"`
	Price    float64 `json:"price"`
	Quantity int     `json:"quantity"`
}

// GetName returns the value of Name.
func (s *Item) GetName() string {
	return s.Name
}

// GetPrice returns the value of Price.
func (s *Item) GetPrice() float64 {
	return s.Price
}

// GetQuantity returns the value of Quantity.
func (s *Item) GetQuantity() int {
	return s.Quantity
}

// SetName sets the value of Name.
func (s *Item) SetName(val string) {
	s.Name = val
}

// SetPrice sets the value of Price.
func (s *Item) SetPrice(val float64) {
	s.Price = val
}

// SetQuantity sets the value of Quantity.
func (s *Item) SetQuantity(val int) {
	s.Quantity = val
}

// Ref: #/components/schemas/Message
type Message struct {
	UserName string `json:"userName"`
	Message  string `json:"message"`
}

// GetUserName returns the value of UserName.
func (s *Message) GetUserName() string {
	return s.UserName
}

// GetMessage returns the value of Message.
func (s *Message) GetMessage() string {
	return s.Message
}

// SetUserName sets the value of UserName.
func (s *Message) SetUserName(val string) {
	s.UserName = val
}

// SetMessage sets the value of Message.
func (s *Message) SetMessage(val string) {
	s.Message = val
}

// Ref: #/components/schemas/MyCategory
type MyCategory string

const (
	MyCategoryRefund           MyCategory = "Refund"
	MyCategoryCancelOrder      MyCategory = "CancelOrder"
	MyCategoryTechnicalSupport MyCategory = "TechnicalSupport"
	MyCategoryAccountIssue     MyCategory = "AccountIssue"
	MyCategoryQuestion         MyCategory = "Question"
)

// AllValues returns all MyCategory values.
func (MyCategory) AllValues() []MyCategory {
	return []MyCategory{
		MyCategoryRefund,
		MyCategoryCancelOrder,
		MyCategoryTechnicalSupport,
		MyCategoryAccountIssue,
		MyCategoryQuestion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MyCategory) MarshalText() ([]byte, error) {
	switch s {
	case MyCategoryRefund:
		return []byte(s), nil
	case MyCategoryCancelOrder:
		return []byte(s), nil
	case MyCategoryTechnicalSupport:
		return []byte(s), nil
	case MyCategoryAccountIssue:
		return []byte(s), nil
	case MyCategoryQuestion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MyCategory) UnmarshalText(data []byte) error {
	switch MyCategory(data) {
	case MyCategoryRefund:
		*s = MyCategoryRefund
		return nil
	case MyCategoryCancelOrder:
		*s = MyCategoryCancelOrder
		return nil
	case MyCategoryTechnicalSupport:
		*s = MyCategoryTechnicalSupport
		return nil
	case MyCategoryAccountIssue:
		*s = MyCategoryAccountIssue
		return nil
	case MyCategoryQuestion:
		*s = MyCategoryQuestion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/MyClass
type MyClass string

const (
	MyClassRefund           MyClass = "Refund"
	MyClassCancelOrder      MyClass = "CancelOrder"
	MyClassTechnicalSupport MyClass = "TechnicalSupport"
	MyClassAccountIssue     MyClass = "AccountIssue"
	MyClassQuestion         MyClass = "Question"
)

// AllValues returns all MyClass values.
func (MyClass) AllValues() []MyClass {
	return []MyClass{
		MyClassRefund,
		MyClassCancelOrder,
		MyClassTechnicalSupport,
		MyClassAccountIssue,
		MyClassQuestion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MyClass) MarshalText() ([]byte, error) {
	switch s {
	case MyClassRefund:
		return []byte(s), nil
	case MyClassCancelOrder:
		return []byte(s), nil
	case MyClassTechnicalSupport:
		return []byte(s), nil
	case MyClassAccountIssue:
		return []byte(s), nil
	case MyClassQuestion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MyClass) UnmarshalText(data []byte) error {
	switch MyClass(data) {
	case MyClassRefund:
		*s = MyClassRefund
		return nil
	case MyClassCancelOrder:
		*s = MyClassCancelOrder
		return nil
	case MyClassTechnicalSupport:
		*s = MyClassTechnicalSupport
		return nil
	case MyClassAccountIssue:
		*s = MyClassAccountIssue
		return nil
	case MyClassQuestion:
		*s = MyClassQuestion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/MyUserMessage
type MyUserMessage struct {
	UserName string `json:"user_name"`
	Content  string `json:"content"`
}

// GetUserName returns the value of UserName.
func (s *MyUserMessage) GetUserName() string {
	return s.UserName
}

// GetContent returns the value of Content.
func (s *MyUserMessage) GetContent() string {
	return s.Content
}

// SetUserName sets the value of UserName.
func (s *MyUserMessage) SetUserName(val string) {
	s.UserName = val
}

// SetContent sets the value of Content.
func (s *MyUserMessage) SetContent(val string) {
	s.Content = val
}

// NewNilChooseNToolsResponseItem returns new NilChooseNToolsResponseItem with value set to v.
func NewNilChooseNToolsResponseItem(v ChooseNToolsResponseItem) NilChooseNToolsResponseItem {
	return NilChooseNToolsResponseItem{
		Value: v,
	}
}

// NilChooseNToolsResponseItem is nullable ChooseNToolsResponseItem.
type NilChooseNToolsResponseItem struct {
	Value ChooseNToolsResponseItem
	Null  bool
}

// SetTo sets value to v.
func (o *NilChooseNToolsResponseItem) SetTo(v ChooseNToolsResponseItem) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilChooseNToolsResponseItem) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilChooseNToolsResponseItem) SetToNull() {
	o.Null = true
	var v ChooseNToolsResponseItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilChooseNToolsResponseItem) Get() (v ChooseNToolsResponseItem, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilChooseNToolsResponseItem) Or(d ChooseNToolsResponseItem) ChooseNToolsResponseItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilChooseOneToolOK returns new NilChooseOneToolOK with value set to v.
func NewNilChooseOneToolOK(v ChooseOneToolOK) NilChooseOneToolOK {
	return NilChooseOneToolOK{
		Value: v,
	}
}

// NilChooseOneToolOK is nullable ChooseOneToolOK.
type NilChooseOneToolOK struct {
	Value ChooseOneToolOK
	Null  bool
}

// SetTo sets value to v.
func (o *NilChooseOneToolOK) SetTo(v ChooseOneToolOK) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilChooseOneToolOK) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilChooseOneToolOK) SetToNull() {
	o.Null = true
	var v ChooseOneToolOK
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilChooseOneToolOK) Get() (v ChooseOneToolOK, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilChooseOneToolOK) Or(d ChooseOneToolOK) ChooseOneToolOK {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExtractReceiptReqReceipt returns new NilExtractReceiptReqReceipt with value set to v.
func NewNilExtractReceiptReqReceipt(v ExtractReceiptReqReceipt) NilExtractReceiptReqReceipt {
	return NilExtractReceiptReqReceipt{
		Value: v,
	}
}

// NilExtractReceiptReqReceipt is nullable ExtractReceiptReqReceipt.
type NilExtractReceiptReqReceipt struct {
	Value ExtractReceiptReqReceipt
	Null  bool
}

// SetTo sets value to v.
func (o *NilExtractReceiptReqReceipt) SetTo(v ExtractReceiptReqReceipt) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExtractReceiptReqReceipt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExtractReceiptReqReceipt) SetToNull() {
	o.Null = true
	var v ExtractReceiptReqReceipt
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExtractReceiptReqReceipt) Get() (v ExtractReceiptReqReceipt, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExtractReceiptReqReceipt) Or(d ExtractReceiptReqReceipt) ExtractReceiptReqReceipt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/OCategory
type OCategory string

const (
	OCategoryRefund           OCategory = "Refund"
	OCategoryCancelOrder      OCategory = "CancelOrder"
	OCategoryTechnicalSupport OCategory = "TechnicalSupport"
	OCategoryAccountIssue     OCategory = "AccountIssue"
	OCategoryQuestion         OCategory = "Question"
)

// AllValues returns all OCategory values.
func (OCategory) AllValues() []OCategory {
	return []OCategory{
		OCategoryRefund,
		OCategoryCancelOrder,
		OCategoryTechnicalSupport,
		OCategoryAccountIssue,
		OCategoryQuestion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OCategory) MarshalText() ([]byte, error) {
	switch s {
	case OCategoryRefund:
		return []byte(s), nil
	case OCategoryCancelOrder:
		return []byte(s), nil
	case OCategoryTechnicalSupport:
		return []byte(s), nil
	case OCategoryAccountIssue:
		return []byte(s), nil
	case OCategoryQuestion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OCategory) UnmarshalText(data []byte) error {
	switch OCategory(data) {
	case OCategoryRefund:
		*s = OCategoryRefund
		return nil
	case OCategoryCancelOrder:
		*s = OCategoryCancelOrder
		return nil
	case OCategoryTechnicalSupport:
		*s = OCategoryTechnicalSupport
		return nil
	case OCategoryAccountIssue:
		*s = OCategoryAccountIssue
		return nil
	case OCategoryQuestion:
		*s = OCategoryQuestion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/OEducation
type OEducation struct {
	School string `json:"school"`
	Degree string `json:"degree"`
	Year   int    `json:"year"`
}

// GetSchool returns the value of School.
func (s *OEducation) GetSchool() string {
	return s.School
}

// GetDegree returns the value of Degree.
func (s *OEducation) GetDegree() string {
	return s.Degree
}

// GetYear returns the value of Year.
func (s *OEducation) GetYear() int {
	return s.Year
}

// SetSchool sets the value of School.
func (s *OEducation) SetSchool(val string) {
	s.School = val
}

// SetDegree sets the value of Degree.
func (s *OEducation) SetDegree(val string) {
	s.Degree = val
}

// SetYear sets the value of Year.
func (s *OEducation) SetYear(val int) {
	s.Year = val
}

// Ref: #/components/schemas/OMessage
type OMessage struct {
	UserName string `json:"userName"`
	Message  string `json:"message"`
}

// GetUserName returns the value of UserName.
func (s *OMessage) GetUserName() string {
	return s.UserName
}

// GetMessage returns the value of Message.
func (s *OMessage) GetMessage() string {
	return s.Message
}

// SetUserName sets the value of UserName.
func (s *OMessage) SetUserName(val string) {
	s.UserName = val
}

// SetMessage sets the value of Message.
func (s *OMessage) SetMessage(val string) {
	s.Message = val
}

// Ref: #/components/schemas/OResume
type OResume struct {
	Name      string       `json:"name"`
	Education []OEducation `json:"education"`
	Skills    []string     `json:"skills"`
}

// GetName returns the value of Name.
func (s *OResume) GetName() string {
	return s.Name
}

// GetEducation returns the value of Education.
func (s *OResume) GetEducation() []OEducation {
	return s.Education
}

// GetSkills returns the value of Skills.
func (s *OResume) GetSkills() []string {
	return s.Skills
}

// SetName sets the value of Name.
func (s *OResume) SetName(val string) {
	s.Name = val
}

// SetEducation sets the value of Education.
func (s *OResume) SetEducation(val []OEducation) {
	s.Education = val
}

// SetSkills sets the value of Skills.
func (s *OResume) SetSkills(val []string) {
	s.Skills = val
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/OrderInfo
type OrderInfo struct {
	OrderStatus          OrderStatus  `json:"order_status"`
	TrackingNumber       OptNilString `json:"tracking_number"`
	EstimatedArrivalDate OptNilString `json:"estimated_arrival_date"`
}

// GetOrderStatus returns the value of OrderStatus.
func (s *OrderInfo) GetOrderStatus() OrderStatus {
	return s.OrderStatus
}

// GetTrackingNumber returns the value of TrackingNumber.
func (s *OrderInfo) GetTrackingNumber() OptNilString {
	return s.TrackingNumber
}

// GetEstimatedArrivalDate returns the value of EstimatedArrivalDate.
func (s *OrderInfo) GetEstimatedArrivalDate() OptNilString {
	return s.EstimatedArrivalDate
}

// SetOrderStatus sets the value of OrderStatus.
func (s *OrderInfo) SetOrderStatus(val OrderStatus) {
	s.OrderStatus = val
}

// SetTrackingNumber sets the value of TrackingNumber.
func (s *OrderInfo) SetTrackingNumber(val OptNilString) {
	s.TrackingNumber = val
}

// SetEstimatedArrivalDate sets the value of EstimatedArrivalDate.
func (s *OrderInfo) SetEstimatedArrivalDate(val OptNilString) {
	s.EstimatedArrivalDate = val
}

// Ref: #/components/schemas/OrderStatus
type OrderStatus string

const (
	OrderStatusORDERED   OrderStatus = "ORDERED"
	OrderStatusSHIPPED   OrderStatus = "SHIPPED"
	OrderStatusDELIVERED OrderStatus = "DELIVERED"
	OrderStatusCANCELLED OrderStatus = "CANCELLED"
)

// AllValues returns all OrderStatus values.
func (OrderStatus) AllValues() []OrderStatus {
	return []OrderStatus{
		OrderStatusORDERED,
		OrderStatusSHIPPED,
		OrderStatusDELIVERED,
		OrderStatusCANCELLED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case OrderStatusORDERED:
		return []byte(s), nil
	case OrderStatusSHIPPED:
		return []byte(s), nil
	case OrderStatusDELIVERED:
		return []byte(s), nil
	case OrderStatusCANCELLED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderStatus) UnmarshalText(data []byte) error {
	switch OrderStatus(data) {
	case OrderStatusORDERED:
		*s = OrderStatusORDERED
		return nil
	case OrderStatusSHIPPED:
		*s = OrderStatusSHIPPED
		return nil
	case OrderStatusDELIVERED:
		*s = OrderStatusDELIVERED
		return nil
	case OrderStatusCANCELLED:
		*s = OrderStatusCANCELLED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Receipt
type Receipt struct {
	EstablishmentName string `json:"establishment_name"`
	Date              string `json:"date"`
	Total             int    `json:"total"`
	Currency          string `json:"currency"`
	Items             []Item `json:"items"`
}

// GetEstablishmentName returns the value of EstablishmentName.
func (s *Receipt) GetEstablishmentName() string {
	return s.EstablishmentName
}

// GetDate returns the value of Date.
func (s *Receipt) GetDate() string {
	return s.Date
}

// GetTotal returns the value of Total.
func (s *Receipt) GetTotal() int {
	return s.Total
}

// GetCurrency returns the value of Currency.
func (s *Receipt) GetCurrency() string {
	return s.Currency
}

// GetItems returns the value of Items.
func (s *Receipt) GetItems() []Item {
	return s.Items
}

// SetEstablishmentName sets the value of EstablishmentName.
func (s *Receipt) SetEstablishmentName(val string) {
	s.EstablishmentName = val
}

// SetDate sets the value of Date.
func (s *Receipt) SetDate(val string) {
	s.Date = val
}

// SetTotal sets the value of Total.
func (s *Receipt) SetTotal(val int) {
	s.Total = val
}

// SetCurrency sets the value of Currency.
func (s *Receipt) SetCurrency(val string) {
	s.Currency = val
}

// SetItems sets the value of Items.
func (s *Receipt) SetItems(val []Item) {
	s.Items = val
}

// Ref: #/components/schemas/Resume
type Resume struct {
	Name      string      `json:"name"`
	Education []Education `json:"education"`
	Skills    []string    `json:"skills"`
}

// GetName returns the value of Name.
func (s *Resume) GetName() string {
	return s.Name
}

// GetEducation returns the value of Education.
func (s *Resume) GetEducation() []Education {
	return s.Education
}

// GetSkills returns the value of Skills.
func (s *Resume) GetSkills() []string {
	return s.Skills
}

// SetName sets the value of Name.
func (s *Resume) SetName(val string) {
	s.Name = val
}

// SetEducation sets the value of Education.
func (s *Resume) SetEducation(val []Education) {
	s.Education = val
}

// SetSkills sets the value of Skills.
func (s *Resume) SetSkills(val []string) {
	s.Skills = val
}

// Ref: #/components/schemas/SendEmail
type SendEmail struct {
	EmailTo      string `json:"emailTo"`
	EmailSubject string `json:"emailSubject"`
	EmailBody    string `json:"emailBody"`
}

// GetEmailTo returns the value of EmailTo.
func (s *SendEmail) GetEmailTo() string {
	return s.EmailTo
}

// GetEmailSubject returns the value of EmailSubject.
func (s *SendEmail) GetEmailSubject() string {
	return s.EmailSubject
}

// GetEmailBody returns the value of EmailBody.
func (s *SendEmail) GetEmailBody() string {
	return s.EmailBody
}

// SetEmailTo sets the value of EmailTo.
func (s *SendEmail) SetEmailTo(val string) {
	s.EmailTo = val
}

// SetEmailSubject sets the value of EmailSubject.
func (s *SendEmail) SetEmailSubject(val string) {
	s.EmailSubject = val
}

// SetEmailBody sets the value of EmailBody.
func (s *SendEmail) SetEmailBody(val string) {
	s.EmailBody = val
}

type UseToolReq struct {
	UserMessage string `json:"user_message"`
}

// GetUserMessage returns the value of UserMessage.
func (s *UseToolReq) GetUserMessage() string {
	return s.UserMessage
}

// SetUserMessage sets the value of UserMessage.
func (s *UseToolReq) SetUserMessage(val string) {
	s.UserMessage = val
}

// Ref: #/components/schemas/User
type User struct {
	Name     string `json:"name"`
	IsActive bool   `json:"is_active"`
}

// GetName returns the value of Name.
func (s *User) GetName() string {
	return s.Name
}

// GetIsActive returns the value of IsActive.
func (s *User) GetIsActive() bool {
	return s.IsActive
}

// SetName sets the value of Name.
func (s *User) SetName(val string) {
	s.Name = val
}

// SetIsActive sets the value of IsActive.
func (s *User) SetIsActive(val bool) {
	s.IsActive = val
}

// Ref: #/components/schemas/UserMessage
type UserMessage struct {
	Message string `json:"message"`
	Role    string `json:"role"`
}

// GetMessage returns the value of Message.
func (s *UserMessage) GetMessage() string {
	return s.Message
}

// GetRole returns the value of Role.
func (s *UserMessage) GetRole() string {
	return s.Role
}

// SetMessage sets the value of Message.
func (s *UserMessage) SetMessage(val string) {
	s.Message = val
}

// SetRole sets the value of Role.
func (s *UserMessage) SetRole(val string) {
	s.Role = val
}

// Ref: #/components/schemas/WeatherAPI
type WeatherAPI struct {
	City      string `json:"city"`
	TimeOfDay string `json:"timeOfDay"`
}

// GetCity returns the value of City.
func (s *WeatherAPI) GetCity() string {
	return s.City
}

// GetTimeOfDay returns the value of TimeOfDay.
func (s *WeatherAPI) GetTimeOfDay() string {
	return s.TimeOfDay
}

// SetCity sets the value of City.
func (s *WeatherAPI) SetCity(val string) {
	s.City = val
}

// SetTimeOfDay sets the value of TimeOfDay.
func (s *WeatherAPI) SetTimeOfDay(val string) {
	s.TimeOfDay = val
}

// Ref: #/components/schemas/WeatherAPI2
type WeatherAPI2 struct {
	City      string `json:"city"`
	TimeOfDay string `json:"timeOfDay"`
}

// GetCity returns the value of City.
func (s *WeatherAPI2) GetCity() string {
	return s.City
}

// GetTimeOfDay returns the value of TimeOfDay.
func (s *WeatherAPI2) GetTimeOfDay() string {
	return s.TimeOfDay
}

// SetCity sets the value of City.
func (s *WeatherAPI2) SetCity(val string) {
	s.City = val
}

// SetTimeOfDay sets the value of TimeOfDay.
func (s *WeatherAPI2) SetTimeOfDay(val string) {
	s.TimeOfDay = val
}
