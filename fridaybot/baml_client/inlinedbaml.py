###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> GPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> GPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> ClaudeSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> Haiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> Fast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.66.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
    "issue.baml": "class Issue {\n  number int\n  title string\n  body string?\n  type \"pull_request\" | \"issue\"\n}\n\nfunction FindRelatedIssue(message: string, issues: Issue[]) -> int? {\n  client ClaudeSonnet\n  prompt #\"\n    {{ _.role('system') }} We are developing a language called BAML and users\n    give us feedback in a community chat.\n    \n    {{ _.role('user') }} You are given a message from a user and a list of\n    issues from our GitHub repository. You have to find the issue or pull\n    request that is the most related to the message and return its issue number.\n    If no issue is related to the message, return null. If both a matching issue\n    and pull request is found, then return the pull request number.\n    \n    MESSAGE:\n    {{ message }}\n    \n    ISSUES:\n    {{ issues }}\n\n    Answer with the issue number or null without any additional explanation.\n  \"#\n}\n\ntest FindRelatedIssueTest {\n  functions [FindRelatedIssue]\n  args {\n    message \"Can I use literal types in BAML?\"\n    issues [\n      {\n        number 1\n        title \"Support literal types\"\n        body \"Add support for literal types in BAML.\"\n        type \"issue\"\n        labels [\"feature\"]\n      }\n      {\n        number 2\n        title \"Add support for recursive types\"\n        body \"Recursive types are working!\"\n        type \"pull_request\"\n        labels [\"feature\"]\n      }\n    ]\n  }\n}\n",
    "message.baml": "enum MessageType {\n  FeatureRequest\n  BugReport\n  Question\n  Uncategorized\n}\n\nclass Message {\n  id int\n  content string\n}\n\nclass Classification {\n  message_id int\n  message_type MessageType\n}\n\nfunction ClassifyMessages(messages: Message[]) -> Classification[] {\n  client ClaudeSonnet\n  prompt #\"\n    {{ _.role('system') }} We are developing a language called BAML and users\n    give us feedback in a community chat. You have to classify the messages we\n    receive from users.\n    \n    {{ _.role('user') }} Classify the following messages from users into one of\n    the given categories:\n    \n    {{ messages }}\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\ntest ClassifyMessageTest {\n  functions [ClassifyMessages]\n  args {\n    messages [\n      { \n        id 1\n        content  \"BAML should support recursive types.\"\n      }\n      { \n        id 2\n        content  \"I found a bug in the BAML compiler.\"\n      }\n      { \n        id 3\n        content  \"How do I install the BAML compiler?\"\n      }\n      { \n        id 4\n        content  \"I like BAML.\"\n      }\n    ] \n  }\n}\n",
    "thread.baml": "class ThreadMessage {\n  user_id int\n  content string\n}\n\nfunction SummerizeThread(messages: ThreadMessage[]) -> string {\n  client ClaudeSonnet\n  prompt #\"\n    {{ _.role('system') }} We are developing a language called BAML and users\n    give us feedback in a community chat. You have to summerize conversations\n    between users.\n    \n    {{ _.role('user') }} Summerize the following conversation from our community\n    chat as briefly as possible:\n    \n    {{ messages }}\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\ntest SummerizeThreadTest {\n  functions [SummerizeThread]\n  args {\n    messages [\n      { \n        user_id 1\n        content  \"I think BAML should support recursive types.\"\n      }\n      { \n        user_id 2\n        content  \"Yeah that would be a useful feature.\"\n      }\n      { \n        user_id 1\n        content  \"How long do you think it would take to implement?\"\n      }\n      { \n        user_id 2\n        content  \"Maybe 3 weeks.\"\n      }\n    ] \n  }\n}\n",
}

def get_baml_files():
    return file_map