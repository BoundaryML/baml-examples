###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Optional, TypeVar, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class Classification(BaseModel):
    message_id: Optional[int] = None
    message_type: Optional[types.MessageType] = None

class Issue(BaseModel):
    number: Optional[int] = None
    title: Optional[str] = None
    body: Optional[str] = None
    type: Optional[Union[Literal["pull_request"], Literal["issue"]]] = None

class Message(BaseModel):
    id: Optional[int] = None
    content: Optional[str] = None

class ThreadMessage(BaseModel):
    user_id: Optional[int] = None
    content: Optional[str] = None
