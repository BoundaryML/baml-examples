###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401,F821
# flake8: noqa: E501,F401,F821
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Optional, TypeVar, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class Answer(BaseModel):
    answersInText: List["Citation"]
    answer: Optional[str] = None

class BookAnalysis(BaseModel):
    bookNames: List[str]
    popularityOverTime: List["PopularityOverTime"]

class CharacterDescription(BaseModel):
    name: Optional[str] = None
    clothingItems: List[str]
    hairColor: Optional[str] = None
    smellDescription: Optional[str] = None
    spells: List["Spells"]

class Citation(BaseModel):
    documentTitle: Optional[str] = None
    sourceLink: Optional[str] = None
    relevantTextFromDocument: Optional[str] = None
    number: Optional[int] = None

class Context(BaseModel):
    documents: List["Document"]

class Document(BaseModel):
    title: Optional[str] = None
    text: Optional[str] = None
    link: Optional[str] = None

class DynamicOutput(BaseModel):
    model_config = ConfigDict(extra='allow')

class Education(BaseModel):
    school: Optional[str] = None
    degree: Optional[str] = None
    year: Optional[int] = None

class Message(BaseModel):
    role: Optional[types.Role] = None
    content: Optional[str] = None

class PopularityOverTime(BaseModel):
    bookName: Optional[str] = None
    scores: List["Score"]

class Ranking(BaseModel):
    bookName: Optional[str] = None
    score: Optional[int] = None

class Resume(BaseModel):
    name: Optional[str] = None
    education: List["Education"]
    skills: List[str]

class Score(BaseModel):
    year: Optional[int] = None
    score: Optional[int] = None

class Spells(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None

class WordCount(BaseModel):
    bookName: Optional[str] = None
    count: Optional[int] = None
