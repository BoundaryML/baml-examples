###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import List, Optional, Union


class Category(str, Enum):
    
    Refund = "Refund"
    CancelOrder = "CancelOrder"
    TechnicalSupport = "TechnicalSupport"
    AccountIssue = "AccountIssue"
    Question = "Question"

class Role(str, Enum):
    
    Customer = "Customer"
    Assistant = "Assistant"

class BookAnalysis(BaseModel):
    
    
    bookNames: List[str]
    popularityOverTime: List["PopularityOverTime"]

class CharacterDescription(BaseModel):
    
    
    name: str
    clothingItems: List[str]
    hairColor: Optional[str] = None
    smellDescription: str
    spells: List["Spells"]

class DynamicOutput(BaseModel):
    
    model_config = ConfigDict(extra='allow')
    

class Education(BaseModel):
    
    
    school: str
    degree: str
    year: int

class Message(BaseModel):
    
    
    role: "Role"
    content: str

class PopularityOverTime(BaseModel):
    
    
    bookName: str
    scores: List["Score"]

class Ranking(BaseModel):
    
    
    bookName: str
    score: int

class Resume(BaseModel):
    
    
    name: str
    education: List["Education"]
    skills: List[str]

class Score(BaseModel):
    
    
    year: int
    score: int

class Spells(BaseModel):
    
    
    name: str
    description: str

class WordCount(BaseModel):
    
    
    bookName: str
    count: int
