###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Generic, List, Optional, TypeVar, Union
import pprint

import baml_py
from pydantic import BaseModel, ValidationError

from . import partial_types, types

OutputType = TypeVar('OutputType')

class BamlOutputWrapper(BaseModel, Generic[OutputType]):
    wrapped: OutputType
    
    @classmethod
    def coerce(cls, parsed: Any) -> OutputType:
      try:
        return cls.model_validate(obj={'wrapped': parsed}).wrapped
      except ValidationError as e:
        
        raise TypeError(
          "Internal BAML error while casting output type:\n{}".format(
            pprint.pformat(parsed)
          )
        ) from e

class BamlClient:
    __runtime: baml_py.BamlRuntimePy
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"

    def __init__(self, runtime: baml_py.BamlRuntimePy, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager)

    @property
    def stream(self):
      return self.__stream_client

    
    async def ClassifyMessage(
        self,
        convo: List[types.Message]
    ) -> List[types.Category]:
      raw = await self.__runtime.call_function(
        "ClassifyMessage",
        {
          "convo": convo,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[List[types.Category]].coerce(raw.parsed())
    
    async def ExtractResume(
        self,
        raw_text: str
    ) -> types.Resume:
      raw = await self.__runtime.call_function(
        "ExtractResume",
        {
          "raw_text": raw_text,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[types.Resume].coerce(raw.parsed())
    

class BamlStreamClient:
    __runtime: baml_py.BamlRuntimePy
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntimePy, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def ClassifyMessage(
        self,
        convo: List[types.Message]
    ) -> baml_py.BamlStream[List[Optional[types.Category]], List[types.Category]]:
      raw = self.__runtime.stream_function(
        "ClassifyMessage",
        {
          "convo": convo,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[List[Optional[types.Category]], List[types.Category]](
        raw,
        BamlOutputWrapper[List[Optional[types.Category]]].coerce,
        BamlOutputWrapper[List[types.Category]].coerce,
        self.__ctx_manager.get(),
      )
    
    def ExtractResume(
        self,
        raw_text: str
    ) -> baml_py.BamlStream[partial_types.Resume, types.Resume]:
      raw = self.__runtime.stream_function(
        "ExtractResume",
        {
          "raw_text": raw_text,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[partial_types.Resume, types.Resume](
        raw,
        BamlOutputWrapper[partial_types.Resume].coerce,
        BamlOutputWrapper[types.Resume].coerce,
        self.__ctx_manager.get(),
      )
    