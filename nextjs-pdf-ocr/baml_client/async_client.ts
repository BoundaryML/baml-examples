/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
/* eslint-disable */
import { BamlRuntime, FunctionResult, BamlCtxManager, BamlStream, Image, ClientRegistry } from "@boundaryml/baml"
import {Revision, Changes} from "./types"
import TypeBuilder from "./type_builder"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export type RecursivePartialNull<T> = T extends object
  ? {
      [P in keyof T]?: RecursivePartialNull<T[P]>;
    }
  : T | null;

export class BamlAsyncClient {
  private runtime: BamlRuntime
  private ctx_manager: BamlCtxManager
  private stream_client: BamlStreamClient

  constructor(runtime: BamlRuntime, ctx_manager: BamlCtxManager) {
    this.runtime = runtime
    this.ctx_manager = ctx_manager
    this.stream_client = new BamlStreamClient(runtime, ctx_manager)
  }

  get stream() {
    return this.stream_client
  }  

  
  async PDFFixLinterError(
      schema: string,linterError: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "PDFFixLinterError",
      {
        "schema": schema,"linterError": linterError
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed() as string
  }
  
  async PDFGenerateBAMLSchema(
      pdf: Image[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "PDFGenerateBAMLSchema",
      {
        "pdf": pdf
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed() as string
  }
  
  async PDFGenerateSections(
      pdf: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "PDFGenerateSections",
      {
        "pdf": pdf
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed() as string
  }
  
  async PDFMakeChange(
      pdf: Image,schema: string,changesNeeded: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "PDFMakeChange",
      {
        "pdf": pdf,"schema": schema,"changesNeeded": changesNeeded
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed() as string
  }
  
  async ReviseSchema(
      pdf: Image,schema: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Revision> {
    const raw = await this.runtime.callFunction(
      "ReviseSchema",
      {
        "pdf": pdf,"schema": schema
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed() as Revision
  }
  
}

class BamlStreamClient {
  constructor(private runtime: BamlRuntime, private ctx_manager: BamlCtxManager) {}

  
  PDFFixLinterError(
      schema: string,linterError: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "PDFFixLinterError",
      {
        "schema": schema,"linterError": linterError
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  PDFGenerateBAMLSchema(
      pdf: Image[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "PDFGenerateBAMLSchema",
      {
        "pdf": pdf
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  PDFGenerateSections(
      pdf: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "PDFGenerateSections",
      {
        "pdf": pdf
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  PDFMakeChange(
      pdf: Image,schema: string,changesNeeded: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "PDFMakeChange",
      {
        "pdf": pdf,"schema": schema,"changesNeeded": changesNeeded
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  ReviseSchema(
      pdf: Image,schema: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Revision>, Revision> {
    const raw = this.runtime.streamFunction(
      "ReviseSchema",
      {
        "pdf": pdf,"schema": schema
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return new BamlStream<RecursivePartialNull<Revision>, Revision>(
      raw,
      (a): a is RecursivePartialNull<Revision> => a,
      (a): a is Revision => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
}

export const b = new BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)