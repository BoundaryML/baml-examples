/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
/* eslint-disable */
const fileMap = {
  
  "clients.baml": "client<llm> GPT4 {\n  provider openai\n  options {\n    model gpt-4\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> GPT4Turbo {\n  provider openai\n  options {\n    model gpt-4-turbo\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> GPT4o {\n  provider openai\n  options {\n    model gpt-4o\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> Sonnet35 {\n  provider anthropic\n  options {\n    model claude-3-5-sonnet-20240620\n    api_key env.ANTHROPIC_API_KEY\n  }\n}",
  "main.baml": "generator lang_typescript {\n  output_type \"typescript\"\n  output_dir \"../\"\n  version \"0.53.0\"\n}",
  "pdf/extract-pdf.baml": "\n\n\ntemplate_string SchemaGuidelines() #\"\n  Available types:\n    - class (mentioned above)\n    - string[], int[], float[]\n    - float\n    - bool\n    - unions can be represented as \"ClassA | ClassB\"\n    - optionals have a question mark: e.g. \"property string?\"\n    - enums in this format:\n      enum MyEnum {\n        VALUE1\n        // a random comment\n        VALUE2 @description(\"Also optional description\")\n        VALUE3\n      }\n\n    Not available:\n    - Recursive types are not supported.\n    - inline definitions are not allowed. you must declare a class for anything nested.\n    - Enums must also be declared separately, not inline.\n\n    Any freeform text goes in double slash:\n    // like this.\n\"#\n\nfunction PDFGenerateBAMLSchema(pdf: image[]) -> string {\n  client Sonnet35\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    Extract the schema of this PDF in this kind of format:\n\n    For objects you want to reuse in the schema, use this syntax:\n    ```\n    class MyObject {\n      // the @description is optional, and it goes AFTER the field you're trying to describe.\n      property string @description(\"some description\")\n      property2 float @description(\"another example\")\n    }\n    ```\n\n    Make sure to write a \"class OutputSchema\" that contains the final schema representation.\n \n    Be thorough, and ensure that every piece of data is accounted for in the schema. If there's a paragraph of text, just add a 1-2 sentence summary in the output schema.\n\n    Don't add any logos or raw base64 images to the output schema.\n\n    If there is a box number of some sort. Indicate that in the @description.\n\n    Add comments about each section you're processing before you write out the class using \"//\"\n \n    {{ SchemaGuidelines() }}\n\n    PDF:\n    {{ pdf }}\n \n    Answer only in the BMAL format. Use comments for any freeform text:\n  \"#\n}\n\n\nfunction PDFFixLinterError(schema: string, linterError: string) -> string {\n  client Sonnet35\n  prompt #\"\n    You are fixing linter errors for this new language called BAML.\n\n    Adjust the schema to fix the errors. Do NOT remove any semantic information.\n    {{ SchemaGuidelines() }}\n\n    LINTER_ERROR:\n    ---\n    {{ linterError }}\n    ---\n\n    FILE TO FIX:\n    ---\n    {{ schema }}\n    ---\n  \"#\n}\n\n\n\nenum Changes {\n  CHANGES_NEEDED\n  NO_CHANGES\n}\nclass Revision {\n  changes string[] @description(\"List of changes that need to be made.\")\n  summary Changes\n}\n\nfunction ReviseSchema(pdf: image, schema: string) -> Revision {\n  client Sonnet35\n  prompt #\"\n    Given this image, and the proposed schema that that can be used to extract the data, indicate if there are any changes needed, like for example, a field was missed or is not actually present.\n    Before you answer explain why.\n\n    Be thorough.\n\n    {{ SchemaGuidelines() }}\n\n    PROPOSED SCHEMA:\n    {{ schema }}\n    {{ pdf }}\n\n    Tell me the changes in this format: {{ ctx.output_format }}\n  \"#\n}\n   \nfunction PDFMakeChange(pdf: image, schema: string, changesNeeded: string) -> string {\n  client Sonnet35\n  prompt #\"\n    Given this PDF, and the proposed schema used to be able to extract the changes, there was some feedback that changes were needed. Using that feedback, revise and return the schema with the new changes.\n\n    PROPOSED_SCHEMA: \n    ---\n    {{ schema }}\n    ---\n\n    {{ SchemaGuidelines }}\n\n    {{ pdf }}\n  \"#\n}\n\n\n\nfunction PDFGenerateSections(pdf: image) -> string {\n  client Sonnet35\n  prompt #\"\n    Generate the top-level structure we should pay attention from this form / PDF.\n\n    Be thorough.\n\n    {{ pdf }}\n  \"#\n}\n\ntest GenerateBAMLSchemaTest {\n  functions [PDFGenerateBAMLSchema]\n  args {\n    pdf [{\n      file ../files/california-tax-form-empty/page1.png\n    }]\n  }\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}