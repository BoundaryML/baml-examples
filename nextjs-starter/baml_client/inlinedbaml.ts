/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
/* eslint-disable */
// This file has the baml files represented as base64 strings for easier bundling in NextJS and other platforms. You can ignore this.
export function b64DecodeUnicode(str: string) {
  return decodeURIComponent(
    Array.prototype.map
      .call(atob(str), function (c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)
      })
      .join(''),
  )
}

export const bamlFilesBase64 = "eyJjbGllbnRzLmJhbWwiOiJjbGllbnQ8bGxtPiBHUFQ0IHtcbiAgcHJvdmlkZXIgYmFtbC1vcGVuYWktY2hhdFxuICBvcHRpb25zIHtcbiAgICBtb2RlbCBncHQtNFxuICAgIGFwaV9rZXkgZW52Lk9QRU5BSV9BUElfS0VZXG4gIH1cbn1cblxuY2xpZW50PGxsbT4gR1BUNFR1cmJvIHtcbiAgcHJvdmlkZXIgYmFtbC1vcGVuYWktY2hhdFxuICBvcHRpb25zIHtcbiAgICBtb2RlbCBncHQtNC0xMTA2LXByZXZpZXdcbiAgICBhcGlfa2V5IGVudi5PUEVOQUlfQVBJX0tFWVxuICB9XG59XG5cbmNsaWVudDxsbG0+IEdQVDMge1xuICBwcm92aWRlciBiYW1sLW9wZW5haS1jaGF0XG4gIG9wdGlvbnMge1xuICAgIG1vZGVsIGdwdC0zLjUtdHVyYm9cbiAgICBhcGlfa2V5IGVudi5PUEVOQUlfQVBJX0tFWVxuICB9XG59ICIsImhpL3RoaW5nLmJhbWwiOiIvLyBoZWxsbyIsIm1haW4uYmFtbCI6ImdlbmVyYXRvciBsYW5nX3R5cGVzY3JpcHQge1xuICBvdXRwdXRfdHlwZSBcInR5cGVzY3JpcHRcIlxuICBvdXRwdXRfZGlyIFwiLi4vXCJcbn1cbiIsImV4YW1wbGVfMS5iYW1sIjoiY2xhc3MgUmVzdW1lIHtcbiAgbmFtZSBzdHJpbmdcbiAgZWR1Y2F0aW9uIEVkdWNhdGlvbltdXG4gIHNraWxscyBzdHJpbmdbXVxufVxuXG5jbGFzcyBFZHVjYXRpb24ge1xuICBzY2hvb2wgc3RyaW5nXG4gIGRlZ3JlZSBzdHJpbmdcbiAgeWVhciBpbnRcbn1cblxuZnVuY3Rpb24gRXh0cmFjdFJlc3VtZShyYXdfdGV4dDogc3RyaW5nKSAtPiBSZXN1bWUge1xuICBjbGllbnQgR1BUNFxuICBwcm9tcHQgI1wiXG4gICAgUGFyc2UgdGhlIGZvbGxvd2luZyByZXN1bWUgYW5kIHJldHVybiBhIHN0cnVjdHVyZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRhdGEgaW4gdGhlIHNjaGVtYSBiZWxvdy5cblxuICAgIFJlc3VtZTpcbiAgICAtLS1cbiAgICB7e3Jhd190ZXh0fX1cbiAgICAtLS1cblxuICAgIE91dHB1dCBKU09OIGZvcm1hdCAob25seSBpbmNsdWRlIHRoZXNlIGZpZWxkcywgYW5kIG5vIG90aGVycyk6XG4gICAge3sgY3R4Lm91dHB1dF9mb3JtYXQocHJlZml4PW51bGwpIH19XG4gIFwiI1xufVxuIFxuICAgICAgICBcbnRlc3Qgc2FyYWgge1xuICBmdW5jdGlvbnMgW0V4dHJhY3RSZXN1bWVdXG4gIGFyZ3Mge1xuICAgIHJhd190ZXh0ICNcIlxuICAgICAgU2FyYWggTW9udGV6XG4gICAgICBIYXJ2YXJkIFVuaXZlcnNpdHlcbiAgICAgIE1heSAyMDE1LTIwMTlcbiAgICAgIDMuOTIgR1BBXG4gICAgICBHb29nbGVcbiAgICAgIFNvZnR3YXJlIEVuZ2luZWVyXG4gICAgICBKdW5lIDIwMTktUHJlc2VudFxuICAgICAgLSBCYWNrZW5kIGVuZ2luZWVyXG4gICAgICAtIFJld3JvdGUgc2VhcmNoIGFuZCB1cGxpZnRlZCBtZXRyaWNzIGJ5IDEyMCVcbiAgICAgIC0gVXNlZCBDKysgYW5kIFB5dGhvblxuICAgICAgTWljcm9zb2Z0XG4gICAgICBTb2Z0d2FyZSBJbnRlcm5cbiAgICAgIEp1bmUgMjAxOC1BdWd1c3QgMjAxOFxuICAgICAgLSBXb3JrZWQgb24gdGhlIFdpbmRvd3MgdGVhbVxuICAgICAgLSBVcGRhdGVkIHRoZSBVSVxuICAgICAgLSBVc2VkIEMrKyAgXG4gICAgXCIjXG4gIH1cbn0gIFxuIFxudGVzdCBqYXNvbiB7XG4gIGZ1bmN0aW9ucyBbRXh0cmFjdFJlc3VtZV1cbiAgYXJncyB7XG4gICAgcmF3X3RleHQgI1wiXG4gICAgSmFzb24gRG9lXG4gICAgUHl0aG9uLCBSdXN0XG4gICAgVW5pdmVyc2l0eSBvZiBDYWxpZm9ybmlhLCBCZXJrZWxleSwgQi5TLlxuICAgIGluIENvbXB1dGVyIFNjaWVuY2UsIDIwMjBcbiAgICBBbHNvIGFuIGV4cGVydCBpbiBUYWJsZWF1LCBTUUwsIGFuZCBDKytcbiAgICBcIiNcbiAgfVxufSIsImV4YW1wbGVfMi5iYW1sIjoiZW51bSBDYXRlZ29yeSB7XG4gICAgUmVmdW5kXG4gICAgQ2FuY2VsT3JkZXJcbiAgICBUZWNobmljYWxTdXBwb3J0XG4gICAgQWNjb3VudElzc3VlXG4gICAgUXVlc3Rpb25cbn1cblxuY2xhc3MgTWVzc2FnZSB7XG4gIHJvbGUgUm9sZVxuICBjb250ZW50IHN0cmluZ1xufVxuXG5lbnVtIFJvbGUge1xuICBDdXN0b21lclxuICBBc3Npc3RhbnRcbn0gIFxuICBcblxudGVtcGxhdGVfc3RyaW5nIFByaW50TWVzc2FnZShtc2c6IE1lc3NhZ2UsIHByZWZpeDogc3RyaW5nPykgI1wiXG4gIHt7IF8uY2hhdCgndXNlcicgaWYgbXNnLnJvbGUgPT0gXCJDdXN0b21lclwiIGVsc2UgJ2Fzc2lzdGFudCcpIH19XG4gIHslIGlmIHByZWZpeCAlfVxuICB7eyBwcmVmaXggfX1cbiAgeyUgZW5kaWYgJX1cbiAge3sgbXNnLmNvbnRlbnQgfX1cblwiI1xuXG5mdW5jdGlvbiBDbGFzc2lmeU1lc3NhZ2UoY29udm86IE1lc3NhZ2VbXSkgLT4gQ2F0ZWdvcnlbXSB7XG4gIGNsaWVudCBHUFQ0XG4gIHByb21wdCAjXCJcbiAgICB7IyBcbiAgICAgIFByb21wdHMgYXJlIGF1dG8tZGVkZW50ZWQgYW5kIHRyaW1tZWQuXG4gICAgICBXZSB1c2UgSklOSkEgZm9yIG91ciBwcm9tcHQgc3ludGF4XG4gICAgICAoYnV0IHdlIGFkZGVkIHNvbWUgc3RhdGljIGFuYWx5c2lzIHRvIG1ha2Ugc3VyZSBpdCdzIHZhbGlkISlcbiAgICAjfVxuXG4gICAge3sgY3R4Lm91dHB1dF9mb3JtYXQocHJlZml4PVwiQ2xhc3NpZnkgd2l0aCB0aGUgZm9sbG93aW5nIGpzb246XCIpIH19XG5cbiAgICB7JSBmb3IgYyBpbiBjb252byAlfVxuICAgIHt7IFByaW50TWVzc2FnZShjLCBcbiAgICAgICdUaGlzIGlzIHRoZSBtZXNzYWdlIHRvIGNsYXNzaWZ5OicgaWYgbG9vcC5sYXN0IGFuZCBjb252b3xsZW5ndGggPiAxIGVsc2UgbnVsbFxuICAgICkgfX1cbiAgICB7JSBlbmRmb3IgJX1cblxuICAgIHt7IF8uY2hhdCgnYXNzaXN0YW50JykgfX1cbiAgICBIZXJlJ3MgYSBzaG9ydCBoYWtpdSB0byBoZWxwIHlvdSByZW1lbWJlciB0aGUgY2F0ZWdvcmllcyBiZWZvcmUgeW91IGNsYXNzaWZ5OlxuICBcIiNcbn1cblxudGVzdCBibHVlX2RvbHBoaW4ge1xuICBmdW5jdGlvbnMgW0NsYXNzaWZ5TWVzc2FnZV1cbiAgYXJncyB7XG4gICAgY29udm8gW1xuICAgICAgeyBcbiAgICAgICAgcm9sZSBDdXN0b21lclxuICAgICAgICBjb250ZW50IFwiSSB3b3VsZCBsaWtlIHRvIGNhbmNlbCBteSBvcmRlci5cIlxuICAgICAgfVxuICAgICAgeyBcbiAgICAgICAgcm9sZSBBc3Npc3RhbnRcbiAgICAgICAgY29udGVudCBcIkknbSBzb3JyeSB0byBoZWFyIHRoYXQuIENhbiB5b3UgcHJvdmlkZSBtZSB3aXRoIHlvdXIgb3JkZXIgbnVtYmVyP1wiXG4gICAgICB9XG4gICAgXVxuICB9XG59In0=" 
export const getBamlFiles = () => {
    const fileMap = JSON.parse(b64DecodeUnicode(bamlFilesBase64))
    for (const [path, content] of Object.entries(fileMap)) {
        fileMap[path] = content
    }
    return fileMap
}