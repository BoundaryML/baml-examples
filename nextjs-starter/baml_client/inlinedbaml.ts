/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "analyze_books.baml": "\nclass Score {\n  year int @description(#\"\n    The year you're giving the score for.\n  \"#)\n  score int @description(#\"\n    1 to 100\n  \"#)\n}\n\nclass PopularityOverTime {\n  bookName string\n  scores Score[]\n}\n\nclass WordCount {\n  bookName string\n  count int\n}\n\nclass Ranking {\n  bookName string\n  score int @description(#\"\n    1 to 100 of your own personal score of this book\n  \"#)\n}\n\nclass BookAnalysis {\n  bookNames string[] @assert({{ this|length > 0 }}) @description(#\"\n    The list of book names provided\n  \"#)\n  popularityOverTime PopularityOverTime[] @description(#\"\n    Print the popularity of EACH BOOK over time.\n    Make sure you add datapoints up to the current year. Try to use a max of 10 datapoints to\n    represent the whole timeline for all books (so 10 handpicked years).\n  \"#) @alias(popularityData)\n  popularityRankings Ranking[] @description(#\"\n    A list of the book's popularity rankings over time.\n    The first element is the top ranking.\n  \"#)\n  wordCounts WordCount[]\n}\n\nfunction AnalyzeBooks(input: string) -> BookAnalysis {\n  client GPT4o\n  prompt #\"\n    Analyze the following book list and provide the information in the schema.\n    For any unknown fields, make a best guess.\n    {{ ctx.output_format }}\n\n    {{ _.role('user') }}\n    {{ input }}\n  \"#\n}\n\ntest TestName {\n  functions [AnalyzeBooks]\n  args {\n    input #\"\n      brave new world\n      the lord of the rings\n      three body problem\n      stormlight archive\n    \"#\n  }\n}\n",
  "classify_message.baml": "enum Category {\n    Refund\n    CancelOrder\n    TechnicalSupport\n    AccountIssue\n    Question\n}\n\nclass Message {\n  role Role\n  content string\n}\n\nenum Role {\n  Customer\n  Assistant\n}\n\n\ntemplate_string PrintMessage(msg: Message, prefix: string?) #\"\n  {{ _.chat('user' if msg.role == \"Customer\" else 'assistant') }}\n  {% if prefix %}\n  {{ prefix }}\n  {% endif %}\n  {{ msg.content }}\n\"#\n\nfunction ClassifyMessage(convo: Message[]) -> Category[] {\n  client GPT4\n  prompt #\"\n    {#\n      Prompts are auto-dedented and trimmed.\n      We use JINJA for our prompt syntax\n      (but we added some static analysis to make sure it's valid!)\n    #}\n\n    {{ ctx.output_format(prefix=\"Classify with the following json:\") }}\n\n    {% for c in convo %}\n    {{ PrintMessage(c,\n      'This is the message to classify:' if loop.last and convo|length > 1 else null\n    ) }}\n    {% endfor %}\n\n    {{ _.chat('assistant') }}\n    JSON array of categories that match:\n  \"#\n}\n\ntest blue_dolphin {\n  functions [ClassifyMessage]\n  args {\n    convo [\n      {\n        role Customer\n        content \"I would like to cancel my order.\"\n      }\n      {\n        role Assistant\n        content \"I'm sorry to hear that. Can you provide me with your order number?\"\n      }\n    ]\n  }\n}\n\n",
  "clients.baml": "client<llm> GPT4 {\n  provider openai\n  options {\n    model gpt-4\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> GPT4Turbo {\n  provider openai\n  options {\n    model gpt-4-turbo\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> GPT4o {\n  provider openai\n  options {\n    model gpt-4o\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> Sonnet35 {\n  provider anthropic\n  options {\n    model claude-3-5-sonnet-20240620\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n",
  "describe_image.baml": "\nclass CharacterDescription {\n  name string\n  clothingItems string[]\n  hairColor string? @description(#\"\n    The color of the character's hair.\n  \"#)\n  smellDescription string\n  spells Spells[]\n}\n\nclass Spells {\n  name string\n  description string\n\n} \n \nfunction DescribeCharacter(first_image: image) -> CharacterDescription {\n  client GPT4o\n  prompt #\"\n    {{ _.role(\"user\")}}\n    \n    Describe the characters in the image:\n    {{ first_image }}\n\n\n    {{ ctx.output_format }}\n\n    Before you answer, explain your reasoning in 3 sentences.\n  \"#\n}\n \ntest TestName {\n  functions [DescribeCharacter]\n  args {\n    first_image { url \"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\"} \n    // second_image { url \"https://upload.wikimedia.org/wikipedia/en/3/3d/The_Lion_King_poster.jpg\"}\n  }\n}\n\n\n",
  "dynamic.baml": "class Person {\n  @@dynamic\n}\n\nfunction ExtractPerson(input: string) -> Person {\n  client GPT4o\n  prompt #\"\n    Extract from this input:\n    {{ input }}\n\n    {{ ctx.output_format }}\n  \"#\n}",
  "extract_resume.baml": "class Resume {\n  name string\n  links Link[] @description(#\"\n    Any links to the candidate's online profiles (e.g. LinkedIn, GitHub, Email).\n    For twitter, just use the format twitter@PROFILE_NAME.\n    For other links, convert them into valid URLs.\n  \"#)\n  education Education[]\n  experience Experience[] @alias(experiences)\n  skills string[]\n  why_hire string[] @description(#\"\n    3 points of why the candidate is a great hire (use fun and exciting language!).\n  \"#)\n}\n\nclass Link {\n  url string @check(valid_link, {{ this|regex_match(\"[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)\") }})\n}\n\nclass Education {\n  school string\n  degree string\n  year int\n}\n\nclass Experience {\n  company string\n  title string?\n  start_date string\n  end_date string?\n  description string[]\n  company_url string? @description(#\"\n    Best guess of the company's website URL.\n  \"#)\n}\n\nfunction IsResume(raw_text: string) -> bool {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Determine if the following text is a resume or not.\n    {{ ctx.output_format }}\n\n    {{ _.role('user') }}\n    {{raw_text}}\n  \"#\n}\n\nfunction ExtractResume(raw_text: string) -> Resume {\n  client GPT4o\n  prompt #\"\n    Parse the following resume and return a structured representation of the data in the schema below.\n    {{ ctx.output_format(prefix=\"Output format:\\n\") }}\n\n    {{ _.role('user') }}\n    {{raw_text}}\n  \"#\n}\n \n\nfunction ExtractResumeNoStructure(raw_text: string) -> string {\n  client GPT4o\n  prompt #\"\n    Parse the following resume and return their education, experience, and skills.\n\n    {{ _.role('user') }}\n    {{raw_text}}\n  \"#\n}\n \n\n        \ntest sarah {\n  functions [ExtractResume, ExtractResumeNoStructure]\n  args {\n    raw_text #\"\n      Sarah Montez\n      Harvard University\n      May 2015-2019\n      3.92 GPA\n      Google\n      Software Engineer\n      June 2019-Present\n      - Backend engineer\n      - Rewrote search and uplifted metrics by 120%\n      - Used C++ and Python\n      Microsoft\n      Software Intern\n      June 2018-August 2018\n      - Worked on the Windows team\n      - Updated the UI\n      - Used C++  \n    \"#\n  }\n}  \n \ntest jason {\n  functions [ExtractResume]\n  args {\n    raw_text #\"\n    Jason Doe\n    Python, Rust\n    University of California, Berkeley, B.S.\n    in Computer Science, 2020\n    Also an expert in Tableau, SQL, and C++\n    \"#\n  }\n}\n\ntest vaibhav {\n  functions [ExtractResume]\n  args { \n    raw_text #\"\n    Vaibhav Guptalinkedin/vaigup(972) 400-5279vaibhavtheory@gmail.comEXPERIENCEGoogle,Software EngineerDec 2018-PresentSeattle, WA•Augmented Reality,Depth Team•Technical Lead for on-device optimizations•Optimized and designed frontfacing depth algorithmon Pixel 4•Focus: C++ and SIMD on custom siliconLife Plus Plus,FounderJuly 2018-July 2019Seattle, WA•Bootcamp for landing people jobs in the computer science industry•Designed the curriculumn and sourced students to join the program•Organically grew to$50k in profit with 3 out of 4 people landing jobsMicrosoft,Program ManagerSep 2017-July 2018Redmond, WA•Microsoft Mixed Reality (HoloLens + VR), 6DoF Tracking•Worked to establish the VR Arcade space with external enterprises•Guided various prototypes from concept stage to enterpise APIsMicrosoft,Software EngineerJul 2015-Sep 2017Redmond, WA•Microsoft HoloLens, Scene Reconstruction•Architected, implemented, tested fault resistent storage pipeline for mesh data across 2 teams•Scoped, designed, and implemented mesh delivery API surface with a team of 2•Responsible for runtime bring up on new hardware with custom instruction set and power constraints•Focus: C++ and SIMD on custom siliconLyte Labs,FounderMar 2014-Jul 2015Austin, TX•Developed prototype hardware to noninvasively measure blood glucose levels•Led a team of 7 across engineering, data collection, and bio-research•Managed data collection across 50 weekly syncs with patients•Raised$50k from multiple funding sources, for research and data collectionOneApp,Co-FounderDec 2011-Aug 2012http://oneapp.googlecode.com•Created an online form generator for K-12 organizations used by 250 students•Focus: PHP, MYSQL, HTML, JavascriptRESEARCHARiSE Pharos Lab,Undergraduate Research AssistantSept 2012-May 2013Prof. Christine Julien, University of Texas at Austin•Implemented coarse localization using indoor wifi signals for triangulation•Focus: Objective CComputation & Neural Systems,Summer InternJune 2012-Aug 2012Prof. Ralph Adolphs, California Institute of Technology•Researched the role of the amygdala in patients•Focus: Signal Processing MATLAB Libraries, RMulti-scale Surface Science and Engineering Cluster,Undergraduate ResearcherMarch 2011-May 2012Dr. Peter Collins, University of North Texas•Used Neural Nets to predict yeild strength of different alloys•Work presented at Materials Science & Technology 2012 Conference•Focus: MATLAB, C++PROJECTS•leapofcode: Website to educate for computer science education with secure remote code execution•rezi.io- Ex-CTO: Website to build and update resumes - over 1,000,000 resumes builtEDUCATIONUniversity of Texas at AustinAug 2012-May 2015Bachelors of Engineering, Integrated CircuitsBachelors of Computer Science\n    \"#\n  }\n}\n",
  "generate_guide.baml": "class Guide {\n    // request_type \n    related_topics Query[] @description(#\"\n        more refined (around 4) to make a user more likely to find the information they need.\n    \"#)\n    processing_instructions string[]\n    packaging_instructions string[]\n}\n\nclass Query {\n    category \"processing\" | \"packaging\"\n    phrase string\n}\n\nfunction GenerateGuide(arg:string) -> Guide {\n    client \"openai/gpt-4o-mini\"\n    prompt #\"\n        You are helping some one understand details about the industrial scale manufacturing process of a product. \n\n        This will include details about the process, the materials used, the equipment used, and the steps involved.\n\n        {{ ctx.output_format }}\n\n        {{ _.role('user') }}\n        User Request: {{ arg }}\n    \"#\n}\n\ntest TestName {\n  functions [GenerateGuide]\n  args {\n    arg #\"\n      beef jerky\n    \"#\n  }\n}\n",
  "generators.baml": "generator lang_typescript {\n  output_type \"typescript/react\"\n  output_dir \"../\"\n  version \"0.88.0\"\n}\n",
  "get_recipe.baml": "class Recipe {\n    topic \"food\" | \"other\"\n    number_of_servings int @description(#\"\n        Best estimate\n    \"#)\n    ingredients (PartIngredient[] | Ingredient[]) @description(#\"\n        Ingredients can be grouped by parts like 'For the sauce' or 'For the dough'\n    \"#)\n    instructions (PartSteps[] | string[]) @description(#\"\n        Instructions can be grouped by parts like 'For the sauce' or 'For the dough'\n    \"#)\n    serving_tips string[] @description(#\"\n        Tips for serving the dish\n    \"#)\n}\n\nclass PartIngredient {\n    title string\n    ingredients Ingredient[]\n}\n\nclass PartSteps {\n    title string\n    steps string[]\n}\n\nclass Ingredient {\n    name string\n    amount float\n    unit string\n    description string? @description(#\"\n        Optional description of the ingredient like 'diced' or 'chopped'\n    \"#)\n}  \n \nfunction GetRecipe(arg: string) -> Recipe {\n    client GPT4o\n    prompt #\"\n        Generate a recipe for a {{arg}}.\n\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest ApplePie {\n    functions [GetRecipe]\n    args {\n        arg \"apple pie\"\n    }\n}\n\ntest Shaksuka {\n    functions [GetRecipe]\n    args {\n        arg \"shakshuka\"\n    }\n}",
  "rag.baml": "class Citation {\n  number int @description(#\"\n    the index in this array\n  \"#)\n  documentTitle string\n  sourceLink string\n  relevantTextFromDocument string @alias(\"relevantSentenceFromDocument\") @description(#\"\n    The relevant text from the document that supports the answer. This is a citation. You must quote it EXACTLY as it appears in the document with any special characters it contains. The text should be contiguous and not broken up. You may NOT summarize or skip sentences. If you need to skip a sentence, start a new citation instead.\n  \"#)\n}\n\nclass Answer {\n  answersInText Citation[] @alias(\"relevantSentencesFromText\")\n  answer string @description(#\"\n    An answer to the user's question that MUST cite sources from the relevantSentencesFromText. Like [0]. If multiple citations are needed, write them like [0][1][2].\n  \"#)\n}\n\n\nclass Document {\n  title string\n  text string\n  link string\n}\nclass Context {\n  documents Document[]\n}\n\nfunction AnswerQuestion(question: string, context: Context) -> Answer {\n  client GPT4o\n  prompt #\"\n    Answer the following question using the given context below.\n    CONTEXT:\n    {% for document in context.documents %}\n    ----\n    DOCUMENT TITLE: {{  document.title }}\n    {{ document.text }}\n    DOCUMENT LINK: {{ document.link }}\n    ----\n    {% endfor %}\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }}\n    QUESTION: {{ question }}\n\n    ANSWER:\n  \"#\n}\n\n// open this in the playground to run it instantly\ntest SampleTest {\n  functions [AnswerQuestion]\n  args {\n    question #\"\n      what achievements did spacex accomplish before anyone else?\n    \"#\n    context {\n      documents [\n        {\n    title \"SpaceX Overview\"\n    link \"https://en.wikipedia.org/wiki/SpaceX\"\n    text #\"\n    Space Exploration Technologies Corporation, commonly referred to as SpaceX, is an American spacecraft manufacturer, launch service provider and satellite communications company headquartered in Hawthorne, California. The company was founded in 2002 by Elon Musk with the goal of reducing space transportation costs and ultimately developing a sustainable colony on Mars. The company currently produces and operates the Falcon 9 and Falcon Heavy rockets along with the Dragon and Starship spacecraft.\n\nThe company offers internet service via its Starlink subsidiary, which became the largest-ever satellite constellation in January 2020 and, as of April 2024, comprised more than 6,000 small satellites in orbit.[8]\n\nMeanwhile, the company is developing Starship, a human-rated, fully-reusable, super heavy-lift launch system for interplanetary and orbital spaceflight. On its first flight in April 2023, it became the largest and most powerful rocket ever flown. The rocket reached space on its second flight that took place in November 2023.\n\nSpaceX is the first private company to develop a liquid-propellant rocket that has reached orbit; to launch, orbit, and recover a spacecraft; to send a spacecraft to the International Space Station; and to send astronauts to the International Space Station. It is also the first organization of any type to achieve a vertical propulsive landing of an orbital rocket booster and the first to reuse such a booster. The company's Falcon 9 rockets have landed and flown again more than 300 times.[9] As of December 2023, SpaceX has around US$180 billion valuation.[10][11]\nHistory\nMain article: History of SpaceX\nSee also: List of Falcon 9 and Falcon Heavy launches\n\n    \"#\n  }\n\n      ]\n    }\n  }\n}\n\n",
  "semantic_streaming.baml": "class SemanticContainer {\n  sixteen_digit_number int\n  string_with_twenty_words string @stream.done\n  class_1 ClassWithoutDone\n  class_2 ClassWithBlockDone\n  class_done_needed ClassWithBlockDone @stream.not_null\n  class_needed ClassWithoutDone @stream.not_null\n  three_small_things SmallThing[] @description(\"Should have three items.\")\n  final_string string\n}\n\nclass ClassWithoutDone {\n  i_16_digits int\n  s_20_words string @description(\"A string with 20 words in it\") @stream.with_state\n}\n\nclass ClassWithBlockDone {\n  i_16_digits int\n  s_20_words string\n  @@stream.done\n}\n\nclass SmallThing {\n  i_16_digits int @stream.not_null\n  i_8_digits int\n}\n\nfunction MakeSemanticContainer() -> SemanticContainer {\n    client GPT4o\n    prompt #\"\n        {{ ctx.output_format }}\n    \"#\n}",
  "test.baml": "\n// We'll use an enum to categorize the reply types\nenum ReplyType {\n  HUMOROUS\n  SARCASTIC\n  CURIOUS\n  INTELLECTUAL\n}\n\nclass Tweet {\n  user string\n  text string\n}\n\nclass Reply {\n  reply_text string\n  reply_type ReplyType\n}\n\n// The output will be an array of Replies, one for each input Tweet\nfunction GenerateReplies(tweets: Tweet[]) -> Reply[] {\n  client openai/gpt-4o\n  prompt #\"\n    Given the following tweets from different users, generate a reply for each tweet categorized into one of the following types: humorous, sarcastic, curious, or intellectual.\n\n    {# Print out each tweet #}\n    {% for tweet in tweets %}\n    User: {{ tweet.user }}\n    Tweet: {{ tweet.text }}\n\n    {# Generate a reply for this tweet #}\n    {{ _.role(\"assistant\") }}\n\n    {{ ctx.output_format }}\n    {% endfor %}\n  \"#\n}\n\n// Test case for GenerateReplies function\ntest GenerateRepliesTest {\n  // Test the GenerateReplies function\n  functions [GenerateReplies]\n  args {\n    tweets [\n      {\n        user \"User1\"\n        text \"I love coding! It's so much fun.\"\n      }\n      {\n        user \"User2\" \n        text \"Why is my code not working? I've been stuck on this bug for hours.\"\n      }\n      {\n        user \"User3\"\n        text \"I just learned about recursion in my computer science class. Mind blown!\"\n      }\n    ]\n  }\n  // Describe the expected output\n  // The test should generate an array of Replies, with different reply types for each input Tweet\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "todo.baml": "class TodoItem {\n    id string @description(\"make this a uuid\")\n    title string\n    created_at int\n    completed_at int?\n    deleted bool\n    tags Tag[]\n}\n\nclass TodoList {\n    items TodoItem[]\n}\n\nenum Tag {\n    Work\n    Personal\n    Errand\n    @@dynamic\n}\n\ntype Tool = MessageToUser | AddItem | AdjustItem\n\nclass MessageToUser {\n    type \"message_to_user\" @stream.not_null\n    message string @stream.not_null @stream.with_state\n}\n\nclass AdjustItem {\n    type \"adjust_item\" @stream.not_null\n    item_id string\n    title string?\n    completed_at int?\n    deleted bool?\n    tags Tag[]?\n    @@stream.done\n}\n\nclass AddItem {\n    type \"add_item\" @stream.not_null\n    title string @stream.not_null\n    tags Tag[]\n    @@stream.done\n}\n\nclass GetDateTime {\n    type \"get_date_time\" @stream.not_null\n    @@stream.done\n}\n\n\nclass ToolCallResult {\n    tool_call Tool\n    result int?\n}\n\nclass State {\n    tool_history ToolCallResult[]\n    todo_list TodoList\n}\n\nclass TodoQuery {\n    message string\n    date_time int\n}\n\n//  If the user trying to modify an item that doesn't exist, send them a message that the item is not on the list and prefix that message with the word \"unkonwn item\"\n\nfunction SelectTools(state: State, query: TodoQuery) -> Tool[] {\n    client \"openai/gpt-4o\"\n    prompt #\"\n        You are a sinister assistant that can help with your todo list.\n        You can adjust an item, add an item, or get the last item id.\n        Here is the state:\n        {{ state }}\n\n        When the user specifies relative times, use the current time and their\n        time delta to determine an absolute time. Never return a value like \"1745877191 - 7200\".\n        Instead, return a value like \"1745870191\".\n\n        When updating an item, you may be tempted to only fill out the fields\n        that need chaning. But it's important instead to fill out all the fields.\n        If you don't want to update a field, set it to the existing value.\n\n        If the user mentions finishing an item that isn't on the list, inform them that\n        it's not on the list. Prefix that messages with \"UNKWOWN ITEM\".\n\n        {{ ctx.output_format }}\n\n        {{ _.role('user')}}\n        User query: {{ query.message }}\n        That message was sent at {{ query.date_time }}\n    \"#\n}\n\ntest TimeOutput {\n    functions [SelectTools]\n    args {\n        state {\n            tool_history []\n            todo_list {\n                items [{\n                    id 1\n                    title \"Read a book\"\n                    created_at 171927000\n                    completed_at null\n                    deleted false\n                    tags [Errand]\n                }]\n            }\n        }\n        query {\n            message \"I finished going to the gym 2 hours ago\"\n            date_time 171927200\n        }\n    }\n}\n\ntest NewFirstItem {\n    functions [SelectTools]\n    args {\n        state {\n            tool_history []\n            todo_list {\n                items []\n            }\n        }\n        query {\n            message \"Add 'Take otu the trash' to Errand\"\n            date_time 1719225600\n        }\n    }\n}\n\ntest NewAdvice {\n    functions [SelectTools]\n    args {\n        state {\n            tool_history []\n            todo_list {\n                items []\n            }\n        }\n        query {\n            message \"Help\"\n            date_time 1719225600\n        }\n    }\n}\n\ntest CompleteSecondItem {\n    functions [SelectTools]\n    args {\n        state {\n            tool_history []\n            todo_list {\n                items [\n                    {\n                        id 1\n                        title \"Take out the trash\"\n                        created_at 1719225600\n                        completed_at null\n                        deleted false\n                        tags [Errand]\n                    },\n                    {\n                        id 2\n                        title \"Buy groceries\"\n                        created_at 1719225600\n                        completed_at null\n                        deleted false\n                        tags [Errand]\n                    }\n                ]\n            }\n        }\n        query {\n            message \"I bought the groceries 5 hours ago\"\n            date_time 1719225600\n        }\n    }\n}\n",
  "van.baml": "class Visibility {\n  view \"partial\" | \"full\"\n}\n\nclass Van {\n  front Visibility | false\n  back Visibility | false\n  driver_side Visibility | false\n  passenger_side Visibility | false\n}\n\nclass VanSideAnalysis {\n  visibility Van\n  confidence \"high\" | \"medium\" | \"low\"\n}\n\nfunction AnalyzeVanSide(vanImage: image) -> VanSideAnalysis {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Analyze the image of a van.\n\n    - This is right side driving (US roads)\n\n    {{ ctx.output_format }}\n\n    Before answering, the perspective of the camera, and anything else relevant.\n\n    Example:\n    - Camera: ...\n    - Clues: ...\n    ...\n\n    {\n      .. // SCHEMA\n    }\n\n    {{ _.role(\"user\") }}\n    {{ vanImage }}\n  \"#\n}\n\nenum VehicleSide {\n  Front @description(#\"\n    The front of the vehicle. If the headlights are visible, it's the front.\n  \"#)\n  Left @description(#\"\n    The left side of the vehicle.\n  \"#)\n  Right @description(#\"\n    The right side of the vehicle.\n  \"#)\n  Back @description(#\"\n    The back of the vehicle. If the taillights are visible, it's the back.\n  \"#)\n}\n\nclass VehicleSideResponse {\n  full_vehicle_side_visible bool @description(#\"\n    True if the entire vehicle side is fully visible, with no significant parts cut off or truncated.\n  \"#)\n  vehicle_side VehicleSide?\n}\n\nfunction IdentifyVehicleSide(vanImage: image) -> VehicleSideResponse {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Identify which side of the rental van is visible in the image.\n    First, ensure the entire vehicle is fully visible, with no significant parts cut off or truncated.\n    Ignore any images where the cargo doors are open.\n    Next, determine if the view shows the front, back, left, or right side.\n    For side identification, look for side mirrors or sliding doors. This picture is of a van, so you can use the driver's cabin as a reference. If it is on the left, then you are looking at the left side. If it is on the right, then you are looking at the right side.\n    {{ ctx.output_format }}\n\n    {{_.role(\"user\")}}\n    {{vanImage}}\n  \"#\n}\n\n\n\ntest VanBackTest {\n  functions [AnalyzeVanSide, IdentifyVehicleSide]\n  args {\n    vanImage {\n      url \"https://i.imgur.com/puXGiMO.png\"\n    }\n  }\n}\n\ntest Van2Test {\n  functions [AnalyzeVanSide, IdentifyVehicleSide]\n  args {\n    vanImage {\n      url \"https://i.imgur.com/UktYcV2.png\"\n    }\n  }\n}\n\n\ntest VanSideLeftTest {\n  functions [AnalyzeVanSide]\n  args {\n    vanImage {\n      file \"./right.png\"\n    }\n  }\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}