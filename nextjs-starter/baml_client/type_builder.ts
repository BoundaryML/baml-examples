/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    AddItem: ClassViewer<'AddItem', "type" | "title" | "tags">;
    
    AdjustItem: ClassViewer<'AdjustItem', "type" | "item_id" | "title" | "completed_at" | "deleted" | "tags">;
    
    Answer: ClassViewer<'Answer', "answersInText" | "answer">;
    
    BookAnalysis: ClassViewer<'BookAnalysis', "bookNames" | "popularityOverTime" | "popularityRankings" | "wordCounts">;
    
    CharacterDescription: ClassViewer<'CharacterDescription', "name" | "clothingItems" | "hairColor" | "smellDescription" | "spells">;
    
    Citation: ClassViewer<'Citation', "number" | "documentTitle" | "sourceLink" | "relevantTextFromDocument">;
    
    ClassWithBlockDone: ClassViewer<'ClassWithBlockDone', "i_16_digits" | "s_20_words">;
    
    ClassWithoutDone: ClassViewer<'ClassWithoutDone', "i_16_digits" | "s_20_words">;
    
    Context: ClassViewer<'Context', "documents">;
    
    Document: ClassViewer<'Document', "title" | "text" | "link">;
    
    Education: ClassViewer<'Education', "school" | "degree" | "year">;
    
    Experience: ClassViewer<'Experience', "company" | "title" | "start_date" | "end_date" | "description" | "company_url">;
    
    GetDateTime: ClassViewer<'GetDateTime', "type">;
    
    Guide: ClassViewer<'Guide', "related_topics" | "processing_instructions" | "packaging_instructions">;
    
    Ingredient: ClassViewer<'Ingredient', "name" | "amount" | "unit" | "description">;
    
    Link: ClassViewer<'Link', "url">;
    
    Message: ClassViewer<'Message', "role" | "content">;
    
    MessageToUser: ClassViewer<'MessageToUser', "type" | "message">;
    
    PartIngredient: ClassViewer<'PartIngredient', "title" | "ingredients">;
    
    PartSteps: ClassViewer<'PartSteps', "title" | "steps">;
    
    Person: ClassBuilder<'Person'>;
    
    PopularityOverTime: ClassViewer<'PopularityOverTime', "bookName" | "scores">;
    
    Query: ClassViewer<'Query', "category" | "phrase">;
    
    Ranking: ClassViewer<'Ranking', "bookName" | "score">;
    
    Recipe: ClassViewer<'Recipe', "topic" | "number_of_servings" | "ingredients" | "instructions" | "serving_tips">;
    
    Reply: ClassViewer<'Reply', "reply_text" | "reply_type">;
    
    Resume: ClassViewer<'Resume', "name" | "links" | "education" | "experience" | "skills" | "why_hire">;
    
    Score: ClassViewer<'Score', "year" | "score">;
    
    SemanticContainer: ClassViewer<'SemanticContainer', "sixteen_digit_number" | "string_with_twenty_words" | "class_1" | "class_2" | "class_done_needed" | "class_needed" | "three_small_things" | "final_string">;
    
    SmallThing: ClassViewer<'SmallThing', "i_16_digits" | "i_8_digits">;
    
    Spells: ClassViewer<'Spells', "name" | "description">;
    
    State: ClassViewer<'State', "tool_history" | "todo_list">;
    
    TodoItem: ClassViewer<'TodoItem', "id" | "title" | "created_at" | "completed_at" | "deleted" | "tags">;
    
    TodoList: ClassViewer<'TodoList', "items">;
    
    TodoQuery: ClassViewer<'TodoQuery', "message" | "date_time">;
    
    ToolCallResult: ClassViewer<'ToolCallResult', "tool_call" | "result">;
    
    Tweet: ClassViewer<'Tweet', "user" | "text">;
    
    Van: ClassViewer<'Van', "front" | "back" | "driver_side" | "passenger_side">;
    
    VanSideAnalysis: ClassViewer<'VanSideAnalysis', "visibility" | "confidence">;
    
    VehicleSideResponse: ClassViewer<'VehicleSideResponse', "full_vehicle_side_visible" | "vehicle_side">;
    
    Visibility: ClassViewer<'Visibility', "view">;
    
    WordCount: ClassViewer<'WordCount', "bookName" | "count">;
    
    
    Category: EnumViewer<'Category', "Refund" | "CancelOrder" | "TechnicalSupport" | "AccountIssue" | "Question">;
    
    ReplyType: EnumViewer<'ReplyType', "HUMOROUS" | "SARCASTIC" | "CURIOUS" | "INTELLECTUAL">;
    
    Role: EnumViewer<'Role', "Customer" | "Assistant">;
    
    Tag: EnumBuilder<'Tag', "Work" | "Personal" | "Errand">;
    
    VehicleSide: EnumViewer<'VehicleSide', "Front" | "Left" | "Right" | "Back">;
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "AddItem","AdjustItem","Answer","BookAnalysis","CharacterDescription","Citation","ClassWithBlockDone","ClassWithoutDone","Context","Document","Education","Experience","GetDateTime","Guide","Ingredient","Link","Message","MessageToUser","PartIngredient","PartSteps","Person","PopularityOverTime","Query","Ranking","Recipe","Reply","Resume","Score","SemanticContainer","SmallThing","Spells","State","TodoItem","TodoList","TodoQuery","ToolCallResult","Tweet","Van","VanSideAnalysis","VehicleSideResponse","Visibility","WordCount",
          ]),
          enums: new Set([
            "Category","ReplyType","Role","Tag","VehicleSide",
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.AddItem = this.tb.classViewer("AddItem", [
          "type","title","tags",
        ]);
        
        this.AdjustItem = this.tb.classViewer("AdjustItem", [
          "type","item_id","title","completed_at","deleted","tags",
        ]);
        
        this.Answer = this.tb.classViewer("Answer", [
          "answersInText","answer",
        ]);
        
        this.BookAnalysis = this.tb.classViewer("BookAnalysis", [
          "bookNames","popularityOverTime","popularityRankings","wordCounts",
        ]);
        
        this.CharacterDescription = this.tb.classViewer("CharacterDescription", [
          "name","clothingItems","hairColor","smellDescription","spells",
        ]);
        
        this.Citation = this.tb.classViewer("Citation", [
          "number","documentTitle","sourceLink","relevantTextFromDocument",
        ]);
        
        this.ClassWithBlockDone = this.tb.classViewer("ClassWithBlockDone", [
          "i_16_digits","s_20_words",
        ]);
        
        this.ClassWithoutDone = this.tb.classViewer("ClassWithoutDone", [
          "i_16_digits","s_20_words",
        ]);
        
        this.Context = this.tb.classViewer("Context", [
          "documents",
        ]);
        
        this.Document = this.tb.classViewer("Document", [
          "title","text","link",
        ]);
        
        this.Education = this.tb.classViewer("Education", [
          "school","degree","year",
        ]);
        
        this.Experience = this.tb.classViewer("Experience", [
          "company","title","start_date","end_date","description","company_url",
        ]);
        
        this.GetDateTime = this.tb.classViewer("GetDateTime", [
          "type",
        ]);
        
        this.Guide = this.tb.classViewer("Guide", [
          "related_topics","processing_instructions","packaging_instructions",
        ]);
        
        this.Ingredient = this.tb.classViewer("Ingredient", [
          "name","amount","unit","description",
        ]);
        
        this.Link = this.tb.classViewer("Link", [
          "url",
        ]);
        
        this.Message = this.tb.classViewer("Message", [
          "role","content",
        ]);
        
        this.MessageToUser = this.tb.classViewer("MessageToUser", [
          "type","message",
        ]);
        
        this.PartIngredient = this.tb.classViewer("PartIngredient", [
          "title","ingredients",
        ]);
        
        this.PartSteps = this.tb.classViewer("PartSteps", [
          "title","steps",
        ]);
        
        this.Person = this.tb.classBuilder("Person", [
          
        ]);
        
        this.PopularityOverTime = this.tb.classViewer("PopularityOverTime", [
          "bookName","scores",
        ]);
        
        this.Query = this.tb.classViewer("Query", [
          "category","phrase",
        ]);
        
        this.Ranking = this.tb.classViewer("Ranking", [
          "bookName","score",
        ]);
        
        this.Recipe = this.tb.classViewer("Recipe", [
          "topic","number_of_servings","ingredients","instructions","serving_tips",
        ]);
        
        this.Reply = this.tb.classViewer("Reply", [
          "reply_text","reply_type",
        ]);
        
        this.Resume = this.tb.classViewer("Resume", [
          "name","links","education","experience","skills","why_hire",
        ]);
        
        this.Score = this.tb.classViewer("Score", [
          "year","score",
        ]);
        
        this.SemanticContainer = this.tb.classViewer("SemanticContainer", [
          "sixteen_digit_number","string_with_twenty_words","class_1","class_2","class_done_needed","class_needed","three_small_things","final_string",
        ]);
        
        this.SmallThing = this.tb.classViewer("SmallThing", [
          "i_16_digits","i_8_digits",
        ]);
        
        this.Spells = this.tb.classViewer("Spells", [
          "name","description",
        ]);
        
        this.State = this.tb.classViewer("State", [
          "tool_history","todo_list",
        ]);
        
        this.TodoItem = this.tb.classViewer("TodoItem", [
          "id","title","created_at","completed_at","deleted","tags",
        ]);
        
        this.TodoList = this.tb.classViewer("TodoList", [
          "items",
        ]);
        
        this.TodoQuery = this.tb.classViewer("TodoQuery", [
          "message","date_time",
        ]);
        
        this.ToolCallResult = this.tb.classViewer("ToolCallResult", [
          "tool_call","result",
        ]);
        
        this.Tweet = this.tb.classViewer("Tweet", [
          "user","text",
        ]);
        
        this.Van = this.tb.classViewer("Van", [
          "front","back","driver_side","passenger_side",
        ]);
        
        this.VanSideAnalysis = this.tb.classViewer("VanSideAnalysis", [
          "visibility","confidence",
        ]);
        
        this.VehicleSideResponse = this.tb.classViewer("VehicleSideResponse", [
          "full_vehicle_side_visible","vehicle_side",
        ]);
        
        this.Visibility = this.tb.classViewer("Visibility", [
          "view",
        ]);
        
        this.WordCount = this.tb.classViewer("WordCount", [
          "bookName","count",
        ]);
        
        
        this.Category = this.tb.enumViewer("Category", [
          "Refund","CancelOrder","TechnicalSupport","AccountIssue","Question",
        ]);
        
        this.ReplyType = this.tb.enumViewer("ReplyType", [
          "HUMOROUS","SARCASTIC","CURIOUS","INTELLECTUAL",
        ]);
        
        this.Role = this.tb.enumViewer("Role", [
          "Customer","Assistant",
        ]);
        
        this.Tag = this.tb.enumBuilder("Tag", [
          "Work","Personal","Errand",
        ]);
        
        this.VehicleSide = this.tb.enumViewer("VehicleSide", [
          "Front","Left","Right","Back",
        ]);
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}