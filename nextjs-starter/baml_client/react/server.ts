/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
'use server'

import { b } from '../index';
import type { Check, Checked  } from "../types";
import type { Image, Audio } from "@boundaryml/baml";

import type {  AddItem,  AdjustItem,  Answer,  BookAnalysis,  Category,  CharacterDescription,  Citation,  ClassWithBlockDone,  ClassWithoutDone,  Context,  Document,  Education,  Experience,  GetDateTime,  Guide,  Ingredient,  Link,  Message,  MessageToUser,  PartIngredient,  PartSteps,  Person,  PopularityOverTime,  Query,  Ranking,  Recipe,  Reply,  ReplyType,  Resume,  Role,  Score,  SemanticContainer,  SmallThing,  Spells,  State,  Tag,  TodoItem,  TodoList,  TodoQuery,  ToolCallResult,  Tweet,  Van,  VanSideAnalysis,  VehicleSide,  VehicleSideResponse,  Visibility,  WordCount } from "../types"

import type * as types from "../types"

/**
 * Regular BAML server actions that return direct responses.
 */

/**
 * Executes the "AnalyzeBooks" BAML action.
 *
 * This server action calls the underlying BAML function "AnalyzeBooks"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<BookAnalysis>} A promise that resolves with the result of the action.
 */
export const AnalyzeBooks = async (
  input: string,
): Promise<BookAnalysis> => {
  return b.AnalyzeBooks(
    input,
  );
};

/**
 * Executes the "AnalyzeVanSide" BAML action.
 *
 * This server action calls the underlying BAML function "AnalyzeVanSide"
 * with the specified parameters.
 *
 * @param { Image } vanImage - Input parameter.
 *
 * @returns {Promise<VanSideAnalysis>} A promise that resolves with the result of the action.
 */
export const AnalyzeVanSide = async (
  vanImage: Image,
): Promise<VanSideAnalysis> => {
  return b.AnalyzeVanSide(
    vanImage,
  );
};

/**
 * Executes the "AnswerQuestion" BAML action.
 *
 * This server action calls the underlying BAML function "AnswerQuestion"
 * with the specified parameters.
 *
 * @param { string } question - Input parameter.
 * @param { Context } context - Input parameter.
 *
 * @returns {Promise<Answer>} A promise that resolves with the result of the action.
 */
export const AnswerQuestion = async (
  question: string,
  context: Context,
): Promise<Answer> => {
  return b.AnswerQuestion(
    question,
    context,
  );
};

/**
 * Executes the "ClassifyMessage" BAML action.
 *
 * This server action calls the underlying BAML function "ClassifyMessage"
 * with the specified parameters.
 *
 * @param { Message[] } convo - Input parameter.
 *
 * @returns {Promise<Category[]>} A promise that resolves with the result of the action.
 */
export const ClassifyMessage = async (
  convo: Message[],
): Promise<Category[]> => {
  return b.ClassifyMessage(
    convo,
  );
};

/**
 * Executes the "DescribeCharacter" BAML action.
 *
 * This server action calls the underlying BAML function "DescribeCharacter"
 * with the specified parameters.
 *
 * @param { Image } first_image - Input parameter.
 *
 * @returns {Promise<CharacterDescription>} A promise that resolves with the result of the action.
 */
export const DescribeCharacter = async (
  first_image: Image,
): Promise<CharacterDescription> => {
  return b.DescribeCharacter(
    first_image,
  );
};

/**
 * Executes the "ExtractPerson" BAML action.
 *
 * This server action calls the underlying BAML function "ExtractPerson"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<Person>} A promise that resolves with the result of the action.
 */
export const ExtractPerson = async (
  input: string,
): Promise<Person> => {
  return b.ExtractPerson(
    input,
  );
};

/**
 * Executes the "ExtractResume" BAML action.
 *
 * This server action calls the underlying BAML function "ExtractResume"
 * with the specified parameters.
 *
 * @param { string } raw_text - Input parameter.
 *
 * @returns {Promise<Resume>} A promise that resolves with the result of the action.
 */
export const ExtractResume = async (
  raw_text: string,
): Promise<Resume> => {
  return b.ExtractResume(
    raw_text,
  );
};

/**
 * Executes the "ExtractResumeNoStructure" BAML action.
 *
 * This server action calls the underlying BAML function "ExtractResumeNoStructure"
 * with the specified parameters.
 *
 * @param { string } raw_text - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const ExtractResumeNoStructure = async (
  raw_text: string,
): Promise<string> => {
  return b.ExtractResumeNoStructure(
    raw_text,
  );
};

/**
 * Executes the "GenerateGuide" BAML action.
 *
 * This server action calls the underlying BAML function "GenerateGuide"
 * with the specified parameters.
 *
 * @param { string } arg - Input parameter.
 *
 * @returns {Promise<Guide>} A promise that resolves with the result of the action.
 */
export const GenerateGuide = async (
  arg: string,
): Promise<Guide> => {
  return b.GenerateGuide(
    arg,
  );
};

/**
 * Executes the "GenerateReplies" BAML action.
 *
 * This server action calls the underlying BAML function "GenerateReplies"
 * with the specified parameters.
 *
 * @param { Tweet[] } tweets - Input parameter.
 *
 * @returns {Promise<Reply[]>} A promise that resolves with the result of the action.
 */
export const GenerateReplies = async (
  tweets: Tweet[],
): Promise<Reply[]> => {
  return b.GenerateReplies(
    tweets,
  );
};

/**
 * Executes the "GetRecipe" BAML action.
 *
 * This server action calls the underlying BAML function "GetRecipe"
 * with the specified parameters.
 *
 * @param { string } arg - Input parameter.
 *
 * @returns {Promise<Recipe>} A promise that resolves with the result of the action.
 */
export const GetRecipe = async (
  arg: string,
): Promise<Recipe> => {
  return b.GetRecipe(
    arg,
  );
};

/**
 * Executes the "IdentifyVehicleSide" BAML action.
 *
 * This server action calls the underlying BAML function "IdentifyVehicleSide"
 * with the specified parameters.
 *
 * @param { Image } vanImage - Input parameter.
 *
 * @returns {Promise<VehicleSideResponse>} A promise that resolves with the result of the action.
 */
export const IdentifyVehicleSide = async (
  vanImage: Image,
): Promise<VehicleSideResponse> => {
  return b.IdentifyVehicleSide(
    vanImage,
  );
};

/**
 * Executes the "IsResume" BAML action.
 *
 * This server action calls the underlying BAML function "IsResume"
 * with the specified parameters.
 *
 * @param { string } raw_text - Input parameter.
 *
 * @returns {Promise<boolean>} A promise that resolves with the result of the action.
 */
export const IsResume = async (
  raw_text: string,
): Promise<boolean> => {
  return b.IsResume(
    raw_text,
  );
};

/**
 * Executes the "MakeSemanticContainer" BAML action.
 *
 * This server action calls the underlying BAML function "MakeSemanticContainer"
 * with the specified parameters.
 *
 *
 * @returns {Promise<SemanticContainer>} A promise that resolves with the result of the action.
 */
export const MakeSemanticContainer = async (
): Promise<SemanticContainer> => {
  return b.MakeSemanticContainer(
  );
};

/**
 * Executes the "SelectTools" BAML action.
 *
 * This server action calls the underlying BAML function "SelectTools"
 * with the specified parameters.
 *
 * @param { State } state - Input parameter.
 * @param { TodoQuery } query - Input parameter.
 *
 * @returns {Promise<(MessageToUser | AddItem | AdjustItem)[]>} A promise that resolves with the result of the action.
 */
export const SelectTools = async (
  state: State,
  query: TodoQuery,
): Promise<(MessageToUser | AddItem | AdjustItem)[]> => {
  return b.SelectTools(
    state,
    query,
  );
};