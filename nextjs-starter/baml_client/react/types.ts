/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlStream } from '@boundaryml/baml';
import type { RecursivePartialNull } from '../types';
import type { BamlValidationError, BamlClientFinishReasonError } from '@boundaryml/baml/errors';
/**
 * Type for representing a partial response with type safety
 * @template Output The type of the partial response data
 */
export type PartialResponse<Output> = {
  partial?: RecursivePartialNull<Output> | null
  final?: never
}

/**
 * Type for representing a final response with type safety
 * @template Output The type of the final response data
 */
export type FinalResponse<Output> = {
  partial?: never
  final: Output
}

export type ServerAction<Input = any, Output = any> = (...args: Input extends any[] ? Input : [Input]) => Promise<ReadableStream<Uint8Array> | Output>;


/**
 * Props for streaming mode, which provides incremental updates.
 * Use this when you want to show partial results as they become available.
 *
 * @template Action The server action type
 */
export type StreamingProps<Action extends ServerAction = ServerAction> = {
  stream: true
  onPartial?: (response?: RecursivePartialNull<Awaited<ReturnType<Action>>>) => void
  onFinal?: (response?: Awaited<ReturnType<Action>>) => void
   /** Called if the operation fails */
  onError?: (error: Error | BamlValidationError | BamlClientFinishReasonError) => void
}

/**
 * Props for non-streaming mode.
 * @template Action The server action type
 */
export type NonStreamingProps<Action extends ServerAction = ServerAction> = {
  stream?: false
  onPartial?: never
  onFinal?: (response?: Awaited<ReturnType<Action>>) => void
   /** Called if the operation fails */
  onError?: (error: Error | BamlValidationError | BamlClientFinishReasonError) => void
}

/**
 * Union type of all possible props for a BAML hook.
 * @template Action The server action type
 */
export type HookProps<Action extends ServerAction = ServerAction> = StreamingProps<Action> | NonStreamingProps<Action>

/**
 * Base return type for all BAML hooks
 */
export type BaseHookResult<Action extends ServerAction = ServerAction> = {
  /**
  * The complete, final result of the operation.
  * Only available after successful completion (when isSuccess is true).
  * Null during loading or if an error occurred.
  */
  data?: Awaited<ReturnType<Action>>;
  /**
  * Error details if the operation failed.
  * Check this when isError is true to handle the failure.
  */
  error: Error | BamlValidationError | BamlClientFinishReasonError | null;
  /**
  * True if the operation failed.
  * Use this to conditionally render error states or retry options.
  */
  isError: boolean;
  /**
  * True while the operation is in progress.
  * Use this to show loading states, spinners, or disable controls.
  */
  isPending: boolean;
  /**
  * True if the operation completed successfully.
  * Check this before accessing the final data.
  */
  isSuccess: boolean;
  /**
  * The current phase of the operation:
  * - idle: Initial state, ready to start
  * - loading: Operation in progress
  * - success: Completed successfully
  * - error: Failed with an error
  */
  status: "idle" | "pending" | "success" | "error";
}

/**
 * Return type for streaming mode BAML hooks
 */
export type StreamingHookResult<Action extends ServerAction = ServerAction> = BaseHookResult<Action> & {
  /**
  * The most recent partial result from the stream.
  * Updates continuously while streaming, showing interim progress.
  * Use this to implement real-time UI updates, typing effects,
  * or progress indicators.
  */
  partialData?: RecursivePartialNull<Awaited<ReturnType<Action>>>;

  /**
  * Call this function to start the operation.
  * Returns a promise that resolves with the final result or null if it failed.
  */
  mutate: (...input: Parameters<Action>) => Promise<ReadableStream<Uint8Array>>;
};

/**
 * Return type for non-streaming mode BAML hooks
 */
export type NonStreamingHookResult<Action extends ServerAction = ServerAction> = BaseHookResult<Action> & {
   /** Not available in non-streaming mode */
   partialData?: never;
  /**
  * Call this function to start the operation.
  * Returns a promise that resolves with the final result or null if it failed.
  */
   mutate: (...input: Parameters<Action>) => Promise<Awaited<ReturnType<Action>>>;
};

/**
 * Conditional return type for BAML hooks based on the provided props
 */
export type HookResult<
  Action extends ServerAction = ServerAction,
  Props extends HookProps<Action> = HookProps<Action>
> = Props extends { stream: true }
  ? StreamingHookResult<Action>
  : NonStreamingHookResult<Action>;

/**
 * Helper type to extract the non-null partial data type from a BAML hook result.
 * This is useful when you want to work with the type of the partial streaming data
 * without dealing with undefined or null values.
 *
 * @template T The server action type that defines the input/output types
 */
export type HookResultPartialData<T extends ServerAction> = NonNullable<HookResult<T>['partialData']>;

/**
 * Helper type to extract the non-null final data type from a BAML hook result.
 * This is useful when you want to work with the type of the final response data
 * without dealing with undefined or null values.
 *
 * @template T The server action type that defines the input/output types
 */
export type HookResultData<T extends ServerAction> = NonNullable<HookResult<T>['data']>;