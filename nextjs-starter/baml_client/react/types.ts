/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlClientFinishReasonError, BamlValidationError } from '@boundaryml/baml/errors';
import type * as Actions from './server'
import type { StreamingServerTypes }from './server_streaming_types'
/**
 * Type representing all action keys except 'stream' and 'stream_types'
 */
export type ActionKey = keyof typeof Actions

/**
 * Type representing a BAML stream response.
 *
 * @template PartialType The type of the partial response.
 * @template FinalType The type of the final response.
 */
export type BamlStreamResponse<PartialType, FinalType> = {
  partial?: PartialType
  final?: FinalType
  error?: Error | BamlValidationError | BamlClientFinishReasonError
}

/**
 * A server action that returns either a ReadableStream of Uint8Array or a final output.
 */
export type ServerAction<Input = any, Output = any> = (
  ...args: Input extends any[] ? Input : [Input]
) => Promise<Output> | ReadableStream<Uint8Array>

/**
 * Helper type to derive the final return type for an action.
 *
 * If the action is a key of the Actions namespace, its final type is
 * derived from (typeof Actions)[TActionKey]. Otherwise, if it is a raw action,
 * the return type is derived directly.
 *
 * @template TActionKey The Actions namespace key
 */
export type FinalReturnType<TActionKey extends ActionKey = ActionKey> = (typeof Actions)[TActionKey] extends (...args: any) => any
  ? Awaited<ReturnType<(typeof Actions)[TActionKey]>>
  : never

/**
 * Helper type to derive the partial return type for an action.
 *
 * If the action is a key of the Actions namespace, its partial type is
 * obtained from the corresponding mapping in StreamingServerTypes.
 * Otherwise, it defaults to never.
 *
 * @template TActionKey The Actions namespace key
 */
 export type PartialReturnType<TActionKey extends ActionKey> = StreamingServerTypes[TActionKey]

/**
 * Props for streaming mode.
 *
 * If TActionKey is a key of Actions then the partial and final types are looked up
 * from StreamingServerTypes and ActionKey respectively.
 * Otherwise, they are inferred directly from the provided function type.
 *
 * @template TActionKey The Actions namespace key
 */
export type StreamingProps<
  TActionKey extends ActionKey = ActionKey
> = {
  stream: true
  onPartial?: (
    response?: PartialReturnType<TActionKey>,
  ) => void
  onFinal?: (
    response?: FinalReturnType<TActionKey>,
  ) => void
  onError?: (error: Error | BamlValidationError | BamlClientFinishReasonError) => void
}

/**
 * Props for non‑streaming mode.
 *
 * @template TActionKey The Actions namespace key
 */
export type NonStreamingProps<
  TActionKey extends ActionKey = ActionKey
> = {
  stream?: false
  onPartial?: never
  onFinal?: (
    response?: FinalReturnType<TActionKey>,
  ) => void
  onError?: (error: Error | BamlValidationError | BamlClientFinishReasonError) => void
}

/**
 * Union type of all possible hook props.
 *
 * @template TActionKey The Actions namespace key
 */
export type HookProps<
  TActionKey extends ActionKey = ActionKey
> =
  | StreamingProps<TActionKey>
  | NonStreamingProps<TActionKey>

/**
 * Base return type for all BAML hooks.
 *
 * The final data type is derived from the non‑streaming action.
 *
 * @template TActionKey Either a key of the Actions namespace or a raw action type.
 */
export type BaseHookResult<TActionKey extends ActionKey = ActionKey> = {
  /**
   * The complete, final result of the operation.
   */
  data?: FinalReturnType<TActionKey>
  /**
   * Error details if the operation failed.
   */
  error?: Error | BamlValidationError | BamlClientFinishReasonError
  /**
   * True if the operation failed.
   */
  isError: boolean
  /**
   * True while the operation is in progress.
   */
  isPending: boolean
  /**
   * True if the operation completed successfully.
   */
  isSuccess: boolean
  /**
   * The current phase of the operation.
   */
  status: 'idle' | 'pending' | 'success' | 'error'
}

/**
 * Return type for streaming mode BAML hooks.
 *
 * @template TActionKey The Actions namespace key
 */
export type StreamingHookResult<TActionKey extends ActionKey = ActionKey> =
  BaseHookResult<TActionKey> & {
    /**
     * The most recent partial result from the stream.
     */
    partialData?: PartialReturnType<TActionKey>
    /**
     * Function to start the operation.
     */
    mutate: (...input: Parameters<(typeof Actions)[TActionKey]>) => Promise<ReadableStream<Uint8Array>>
  }

/**
 * Return type for non‑streaming mode BAML hooks.
 *
 * @template TActionKey The Actions namespace key
 */
export type NonStreamingHookResult<TActionKey extends ActionKey = ActionKey> =
  BaseHookResult<TActionKey> & {
    partialData?: never
    mutate: (
      ...input: Parameters<(typeof Actions)[TActionKey]>
    ) => Promise<Awaited<ReturnType<(typeof Actions)[TActionKey]>>>
  }

/**
 * Conditional return type for BAML hooks based on the provided props.
 *
 * @template TActionKey The Actions namespace key
 * @template Props The hook props.
 */
export type HookResult<
  TActionKey extends ActionKey = ActionKey,
  Props extends HookProps<TActionKey> = HookProps<TActionKey>,
> = Props extends { stream: true } ? StreamingHookResult<TActionKey> : NonStreamingHookResult<TActionKey>

/**
 * Helper type to extract the non‑null partial data type from a BAML hook result.
 *
 * @template TActionKey The Actions namespace key
 */
export type HookResultPartialData<TActionKey extends ActionKey = ActionKey> = NonNullable<
  HookResult<TActionKey, { stream: true }>['partialData']
>

/**
 * Helper type to extract the non‑null final data type from a BAML hook result.
 *
 * @template TActionKey The Actions namespace key
 */
export type HookResultData<TActionKey extends ActionKey = ActionKey> = NonNullable<
  HookResult<TActionKey, { stream: false }>['data']
>