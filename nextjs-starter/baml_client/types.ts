/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"

/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}


export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export enum Category {
  Refund = "Refund",
  CancelOrder = "CancelOrder",
  TechnicalSupport = "TechnicalSupport",
  AccountIssue = "AccountIssue",
  Question = "Question",
}

export enum ReplyType {
  HUMOROUS = "HUMOROUS",
  SARCASTIC = "SARCASTIC",
  CURIOUS = "CURIOUS",
  INTELLECTUAL = "INTELLECTUAL",
}

export enum Role {
  Customer = "Customer",
  Assistant = "Assistant",
}

export enum Tag {
  Work = "Work",
  Personal = "Personal",
  Errand = "Errand",
}

export enum VehicleSide {
  Front = "Front",
  Left = "Left",
  Right = "Right",
  Back = "Back",
}

export interface AddItem {
  type: "add_item"
  title: string
  tags: (string | Tag)[]
  
}

export interface AdjustItem {
  type: "adjust_item"
  item_id: string
  title?: string | null
  completed_at?: number | null
  deleted?: boolean | null
  tags?: (string | Tag)[] | null
  
}

export interface Answer {
  answersInText: Citation[]
  answer: string
  
}

export interface BookAnalysis {
  bookNames: string[]
  popularityOverTime: PopularityOverTime[]
  popularityRankings: Ranking[]
  wordCounts: WordCount[]
  
}

export interface CharacterDescription {
  name: string
  clothingItems: string[]
  hairColor?: string | null
  smellDescription: string
  spells: Spells[]
  
}

export interface Citation {
  number: number
  documentTitle: string
  sourceLink: string
  relevantTextFromDocument: string
  
}

export interface ClassWithBlockDone {
  i_16_digits: number
  s_20_words: string
  
}

export interface ClassWithoutDone {
  i_16_digits: number
  s_20_words: string
  
}

export interface Context {
  documents: Document[]
  
}

export interface Document {
  title: string
  text: string
  link: string
  
}

export interface Education {
  school: string
  degree: string
  year: number
  
}

export interface Experience {
  company: string
  title?: string | null
  start_date: string
  end_date?: string | null
  description: string[]
  company_url?: string | null
  
}

export interface GetDateTime {
  type: "get_date_time"
  
}

export interface Guide {
  related_topics: Query[]
  processing_instructions: string[]
  packaging_instructions: string[]
  
}

export interface Ingredient {
  name: string
  amount: number
  unit: string
  description?: string | null
  
}

export interface Link {
  url: Checked<string,"valid_link">
  
}

export interface Message {
  role: Role
  content: string
  
}

export interface MessageToUser {
  type: "message_to_user"
  message: string
  
}

export interface PartIngredient {
  title: string
  ingredients: Ingredient[]
  
}

export interface PartSteps {
  title: string
  steps: string[]
  
}

export interface Person {
  
  [key: string]: any;
}

export interface PopularityOverTime {
  bookName: string
  scores: Score[]
  
}

export interface Query {
  category: "processing" | "packaging"
  phrase: string
  
}

export interface Ranking {
  bookName: string
  score: number
  
}

export interface Recipe {
  topic: "food" | "other"
  number_of_servings: number
  ingredients: PartIngredient[] | Ingredient[]
  instructions: PartSteps[] | string[]
  serving_tips: string[]
  
}

export interface Reply {
  reply_text: string
  reply_type: ReplyType
  
}

export interface Resume {
  name: string
  links: Link[]
  education: Education[]
  experience: Experience[]
  skills: string[]
  why_hire: string[]
  
}

export interface Score {
  year: number
  score: number
  
}

export interface SemanticContainer {
  sixteen_digit_number: number
  string_with_twenty_words: string
  class_1: ClassWithoutDone
  class_2: ClassWithBlockDone
  class_done_needed: ClassWithBlockDone
  class_needed: ClassWithoutDone
  three_small_things: SmallThing[]
  final_string: string
  
}

export interface SmallThing {
  i_16_digits: number
  i_8_digits: number
  
}

export interface Spells {
  name: string
  description: string
  
}

export interface State {
  tool_history: ToolCallResult[]
  todo_list: TodoList
  
}

export interface TodoItem {
  id: string
  title: string
  created_at: number
  completed_at?: number | null
  deleted: boolean
  tags: (string | Tag)[]
  
}

export interface TodoList {
  items: TodoItem[]
  
}

export interface TodoQuery {
  message: string
  date_time: number
  
}

export interface ToolCallResult {
  tool_call: MessageToUser | AddItem | AdjustItem
  result?: number | null
  
}

export interface Tweet {
  user: string
  text: string
  
}

export interface Van {
  front: Visibility | false
  back: Visibility | false
  driver_side: Visibility | false
  passenger_side: Visibility | false
  
}

export interface VanSideAnalysis {
  visibility: Van
  confidence: "high" | "medium" | "low"
  
}

export interface VehicleSideResponse {
  full_vehicle_side_visible: boolean
  vehicle_side?: VehicleSide | null
  
}

export interface Visibility {
  view: "partial" | "full"
  
}

export interface WordCount {
  bookName: string
  count: number
  
}
