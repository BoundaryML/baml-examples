/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio } from "@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {AddItem, AdjustItem, Answer, BookAnalysis, Category, CharacterDescription, Citation, ClassWithBlockDone, ClassWithoutDone, Context, Document, Education, Experience, GetDateTime, Guide, Ingredient, Link, Message, MessageToUser, PartIngredient, PartSteps, Person, PopularityOverTime, Query, Ranking, Recipe, Reply, ReplyType, Resume, Role, Score, SemanticContainer, SmallThing, Spells, State, Tag, TodoItem, TodoList, TodoQuery, ToolCallResult, Tweet, Van, VanSideAnalysis, VehicleSide, VehicleSideResponse, Visibility, WordCount} from "./types"
import type TypeBuilder from "./type_builder"

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
}

export class HttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AnalyzeBooks(
      input: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "AnalyzeBooks",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AnalyzeVanSide(
      vanImage: Image,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "AnalyzeVanSide",
        {
          "vanImage": vanImage
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AnswerQuestion(
      question: string,context: Context,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "AnswerQuestion",
        {
          "question": question,"context": context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ClassifyMessage(
      convo: Message[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "ClassifyMessage",
        {
          "convo": convo
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DescribeCharacter(
      first_image: Image,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "DescribeCharacter",
        {
          "first_image": first_image
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractPerson(
      input: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "ExtractPerson",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractResume(
      raw_text: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "ExtractResume",
        {
          "raw_text": raw_text
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractResumeNoStructure(
      raw_text: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "ExtractResumeNoStructure",
        {
          "raw_text": raw_text
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateGuide(
      arg: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateGuide",
        {
          "arg": arg
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateReplies(
      tweets: Tweet[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateReplies",
        {
          "tweets": tweets
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GetRecipe(
      arg: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GetRecipe",
        {
          "arg": arg
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IdentifyVehicleSide(
      vanImage: Image,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "IdentifyVehicleSide",
        {
          "vanImage": vanImage
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IsResume(
      raw_text: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "IsResume",
        {
          "raw_text": raw_text
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  MakeSemanticContainer(
      
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "MakeSemanticContainer",
        {
          
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SelectTools(
      state: State,query: TodoQuery,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "SelectTools",
        {
          "state": state,"query": query
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class HttpStreamRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AnalyzeBooks(
      input: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "AnalyzeBooks",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AnalyzeVanSide(
      vanImage: Image,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "AnalyzeVanSide",
        {
          "vanImage": vanImage
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AnswerQuestion(
      question: string,context: Context,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "AnswerQuestion",
        {
          "question": question,"context": context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ClassifyMessage(
      convo: Message[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "ClassifyMessage",
        {
          "convo": convo
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DescribeCharacter(
      first_image: Image,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "DescribeCharacter",
        {
          "first_image": first_image
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractPerson(
      input: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "ExtractPerson",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractResume(
      raw_text: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "ExtractResume",
        {
          "raw_text": raw_text
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractResumeNoStructure(
      raw_text: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "ExtractResumeNoStructure",
        {
          "raw_text": raw_text
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateGuide(
      arg: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateGuide",
        {
          "arg": arg
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateReplies(
      tweets: Tweet[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateReplies",
        {
          "tweets": tweets
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GetRecipe(
      arg: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GetRecipe",
        {
          "arg": arg
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IdentifyVehicleSide(
      vanImage: Image,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "IdentifyVehicleSide",
        {
          "vanImage": vanImage
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IsResume(
      raw_text: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "IsResume",
        {
          "raw_text": raw_text
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  MakeSemanticContainer(
      
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "MakeSemanticContainer",
        {
          
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SelectTools(
      state: State,query: TodoQuery,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "SelectTools",
        {
          "state": state,"query": query
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}