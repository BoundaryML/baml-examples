/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Collector } from "@boundaryml/baml"
import { toBamlError } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type { partial_types } from "./partial_types"
import type * as types from "./types"
import type {AddItem, AdjustItem, Answer, BookAnalysis, Category, CharacterDescription, Citation, ClassWithBlockDone, ClassWithoutDone, Context, Document, Education, Experience, GetDateTime, Guide, Ingredient, Link, Message, MessageToUser, PartIngredient, PartSteps, Person, PopularityOverTime, Query, Ranking, Recipe, Reply, ReplyType, Resume, Role, Score, SemanticContainer, SmallThing, Spells, State, Tag, TodoItem, TodoList, TodoQuery, ToolCallResult, Tweet, Van, VanSideAnalysis, VehicleSide, VehicleSideResponse, Visibility, WordCount} from "./types"
import type TypeBuilder from "./type_builder"

export class LlmResponseParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AnalyzeBooks(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BookAnalysis {
    try {
      return this.runtime.parseLlmResponse(
        "AnalyzeBooks",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as BookAnalysis
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AnalyzeVanSide(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): VanSideAnalysis {
    try {
      return this.runtime.parseLlmResponse(
        "AnalyzeVanSide",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as VanSideAnalysis
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AnswerQuestion(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Answer {
    try {
      return this.runtime.parseLlmResponse(
        "AnswerQuestion",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Answer
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ClassifyMessage(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Category[] {
    try {
      return this.runtime.parseLlmResponse(
        "ClassifyMessage",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Category[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DescribeCharacter(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): CharacterDescription {
    try {
      return this.runtime.parseLlmResponse(
        "DescribeCharacter",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as CharacterDescription
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractPerson(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Person {
    try {
      return this.runtime.parseLlmResponse(
        "ExtractPerson",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Person
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractResume(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Resume {
    try {
      return this.runtime.parseLlmResponse(
        "ExtractResume",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Resume
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractResumeNoStructure(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
      return this.runtime.parseLlmResponse(
        "ExtractResumeNoStructure",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateGuide(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Guide {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateGuide",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Guide
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateReplies(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Reply[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateReplies",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Reply[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GetRecipe(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Recipe {
    try {
      return this.runtime.parseLlmResponse(
        "GetRecipe",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Recipe
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IdentifyVehicleSide(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): VehicleSideResponse {
    try {
      return this.runtime.parseLlmResponse(
        "IdentifyVehicleSide",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as VehicleSideResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IsResume(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): boolean {
    try {
      return this.runtime.parseLlmResponse(
        "IsResume",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as boolean
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  MakeSemanticContainer(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): SemanticContainer {
    try {
      return this.runtime.parseLlmResponse(
        "MakeSemanticContainer",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as SemanticContainer
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SelectTools(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (MessageToUser | AddItem | AdjustItem)[] {
    try {
      return this.runtime.parseLlmResponse(
        "SelectTools",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (MessageToUser | AddItem | AdjustItem)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class LlmStreamParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AnalyzeBooks(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.BookAnalysis {
    try {
      return this.runtime.parseLlmResponse(
        "AnalyzeBooks",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.BookAnalysis
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AnalyzeVanSide(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.VanSideAnalysis {
    try {
      return this.runtime.parseLlmResponse(
        "AnalyzeVanSide",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.VanSideAnalysis
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AnswerQuestion(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Answer {
    try {
      return this.runtime.parseLlmResponse(
        "AnswerQuestion",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Answer
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ClassifyMessage(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (Category | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "ClassifyMessage",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (Category | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DescribeCharacter(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.CharacterDescription {
    try {
      return this.runtime.parseLlmResponse(
        "DescribeCharacter",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.CharacterDescription
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractPerson(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Person {
    try {
      return this.runtime.parseLlmResponse(
        "ExtractPerson",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Person
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractResume(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Resume {
    try {
      return this.runtime.parseLlmResponse(
        "ExtractResume",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Resume
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractResumeNoStructure(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
      return this.runtime.parseLlmResponse(
        "ExtractResumeNoStructure",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateGuide(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Guide {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateGuide",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Guide
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateReplies(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.Reply | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateReplies",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.Reply | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GetRecipe(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Recipe {
    try {
      return this.runtime.parseLlmResponse(
        "GetRecipe",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Recipe
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IdentifyVehicleSide(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.VehicleSideResponse {
    try {
      return this.runtime.parseLlmResponse(
        "IdentifyVehicleSide",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.VehicleSideResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IsResume(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): boolean {
    try {
      return this.runtime.parseLlmResponse(
        "IsResume",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as boolean
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  MakeSemanticContainer(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.SemanticContainer {
    try {
      return this.runtime.parseLlmResponse(
        "MakeSemanticContainer",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.SemanticContainer
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SelectTools(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ((partial_types.MessageToUser | null) | (types.AddItem | null) | (types.AdjustItem | null) | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "SelectTools",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as ((partial_types.MessageToUser | null) | (types.AddItem | null) | (types.AdjustItem | null) | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}