# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..clients.client_main import Main
from ..functions.fx_classifyintent import BAMLClassifyIntent
from ..types.enums.enm_intent import Intent
from baml_core.provider_manager.llm_response import LLMResponse
from baml_core.stream import AsyncStream
from baml_lib._impl.deserializer import Deserializer
from typing import List


import typing
# Impl: advanced
# Client: Main
# An implementation of ClassifyIntent.

__prompt_template = """\
Given the question, which of the intents is the user attempting to do?

Question:
```
{query}
```

User Intent
---
k1: When the user wants to book a meeting
k2: When the user is asking about their calendar availability
k3: When the user wants to set a reminder

Output JSON: "User Intent as string"[]

JSON:\
"""

__input_replacers = {
    "{query}"
}


# We ignore the type here because baml does some type magic to make this work
# for inline SpecialForms like Optional, Union, List.
__deserializer = Deserializer[List[Intent]](List[Intent])  # type: ignore
__deserializer.overload("Intent", {"k1": "BookMeeting", "k2": "AvailabilityQuery", "k3": "SetReminder"})

# Add a deserializer that handles stream responses, which are all Partial types
__partial_deserializer = Deserializer[List[Intent]](List[Intent])  # type: ignore
__partial_deserializer.overload("Intent", {"k1": "BookMeeting", "k2": "AvailabilityQuery", "k3": "SetReminder"})







async def advanced(*, query: str) -> List[Intent]:
    response = await Main.run_prompt_template(template=__prompt_template, replacers=__input_replacers, params=dict(query=query))
    deserialized = __deserializer.from_string(response.generated)
    return deserialized


def advanced_stream(*, query: str
) -> AsyncStream[List[Intent], List[Intent]]:
    def run_prompt() -> typing.AsyncIterator[LLMResponse]:
        raw_stream = Main.run_prompt_template_stream(template=__prompt_template, replacers=__input_replacers, params=dict(query=query))
        return raw_stream
    stream = AsyncStream(stream_cb=run_prompt, partial_deserializer=__partial_deserializer, final_deserializer=__deserializer)
    return stream

BAMLClassifyIntent.register_impl("advanced")(advanced, advanced_stream)