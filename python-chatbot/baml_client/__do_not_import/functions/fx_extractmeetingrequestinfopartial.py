# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..types.classes.cls_conversation import Conversation
from ..types.classes.cls_meetingrequestpartial import MeetingRequestPartial
from ..types.classes.cls_message import Message
from ..types.enums.enm_usertype import UserType
from ..types.partial.classes.cls_conversation import PartialConversation
from ..types.partial.classes.cls_meetingrequestpartial import PartialMeetingRequestPartial
from ..types.partial.classes.cls_message import PartialMessage
from baml_core.stream import AsyncStream
from baml_lib._impl.functions import BaseBAMLFunction
from typing import AsyncIterator, Callable, Protocol, runtime_checkable


IExtractMeetingRequestInfoPartialOutput = MeetingRequestPartial

@runtime_checkable
class IExtractMeetingRequestInfoPartial(Protocol):
    """
    This is the interface for a function.

    Args:
        convo: Conversation
        now: str

    Returns:
        MeetingRequestPartial
    """

    async def __call__(self, *, convo: Conversation, now: str) -> MeetingRequestPartial:
        ...

   

@runtime_checkable
class IExtractMeetingRequestInfoPartialStream(Protocol):
    """
    This is the interface for a stream function.

    Args:
        convo: Conversation
        now: str

    Returns:
        AsyncStream[MeetingRequestPartial, PartialMeetingRequestPartial]
    """

    def __call__(self, *, convo: Conversation, now: str
) -> AsyncStream[MeetingRequestPartial, PartialMeetingRequestPartial]:
        ...
class IBAMLExtractMeetingRequestInfoPartial(BaseBAMLFunction[MeetingRequestPartial, PartialMeetingRequestPartial]):
    def __init__(self) -> None:
        super().__init__(
            "ExtractMeetingRequestInfoPartial",
            IExtractMeetingRequestInfoPartial,
            ["v1"],
        )

    async def __call__(self, *args, **kwargs) -> MeetingRequestPartial:
        return await self.get_impl("v1").run(*args, **kwargs)
    
    def stream(self, *args, **kwargs) -> AsyncStream[MeetingRequestPartial, PartialMeetingRequestPartial]:
        res = self.get_impl("v1").stream(*args, **kwargs)
        return res

BAMLExtractMeetingRequestInfoPartial = IBAMLExtractMeetingRequestInfoPartial()

__all__ = [ "BAMLExtractMeetingRequestInfoPartial" ]
