# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..types.classes.cls_meetingrequestpartial import MeetingRequestPartial
from ..types.classes.cls_validation import Validation
from ..types.partial.classes.cls_meetingrequestpartial import PartialMeetingRequestPartial
from ..types.partial.classes.cls_validation import PartialValidation
from baml_core.stream import AsyncStream
from baml_lib._impl.functions import BaseBAMLFunction
from typing import AsyncIterator, Callable, Protocol, runtime_checkable


IGetNextQuestionOutput = Validation

@runtime_checkable
class IGetNextQuestion(Protocol):
    """
    This is the interface for a function.

    Args:
        arg: MeetingRequestPartial

    Returns:
        Validation
    """

    async def __call__(self, arg: MeetingRequestPartial, /) -> Validation:
        ...

   

@runtime_checkable
class IGetNextQuestionStream(Protocol):
    """
    This is the interface for a stream function.

    Args:
        arg: MeetingRequestPartial

    Returns:
        AsyncStream[Validation, PartialValidation]
    """

    def __call__(self, arg: MeetingRequestPartial, /) -> AsyncStream[Validation, PartialValidation]:
        ...
class IBAMLGetNextQuestion(BaseBAMLFunction[Validation, PartialValidation]):
    def __init__(self) -> None:
        super().__init__(
            "GetNextQuestion",
            IGetNextQuestion,
            ["v1"],
        )

    async def __call__(self, *args, **kwargs) -> Validation:
        return await self.get_impl("v1").run(*args, **kwargs)
    
    def stream(self, *args, **kwargs) -> AsyncStream[Validation, PartialValidation]:
        res = self.get_impl("v1").stream(*args, **kwargs)
        return res

BAMLGetNextQuestion = IBAMLGetNextQuestion()

__all__ = [ "BAMLGetNextQuestion" ]
