# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from .__do_not_import.generated_baml_client import baml
from .baml_types import Attendee, Audience, Conversation, IClassifyIntent, IExtractMeetingRequestInfo, IGenerateUserChatPrompts, IThingy, Intent, MeetingRequest, Message, Thing, UserType, ZenfetchBotDocumentBase, ZenfetchBotDocumentBaseList
from baml_lib._impl.deserializer import Deserializer
from json5 import dumps # type: ignore, loads # type: ignore


@baml.Thingy.test
async def test_calm_coffee(ThingyImpl: IThingy):
    deserializer = Deserializer[Audience](Audience) # type: ignore
    param = deserializer.from_string(dumps({"attendees":[{"name":"sefsef","email":"sefsefse"}],"topic":{"name":"asdfsf","other":1}}))
    await ThingyImpl(param)


@baml.GenerateUserChatPrompts.test
async def test_modern_white(GenerateUserChatPromptsImpl: IGenerateUserChatPrompts):
    deserializer = Deserializer[ZenfetchBotDocumentBaseList](ZenfetchBotDocumentBaseList) # type: ignore
    param = deserializer.from_string(dumps({"list_of_documents":[{"title":"asfaef","topic":"asef","text":"asef","author":"asef","raw_url":"asef","date_created":"asefasef"},{"title":"asefaefs","topic":"asef","text":"asefaesf","author":"asefasef","raw_url":"asef\"hello\"","date_created":"asefasefsef"}]}))
    await GenerateUserChatPromptsImpl(param)


@baml.ExtractMeetingRequestInfo.test
async def test_noisy_crimson(ExtractMeetingRequestInfoImpl: IExtractMeetingRequestInfo):
    case = loads("""
{"convo":{"messages":[{"user":"User","content":"Hey! its urgent that we speak to john@corp.com"},{"user":"User","content":"Its about the call with Acme Org later today"},{"user":"AI","content":"Sure, when would you like to chat with John?"},{"user":"User","content":"3"}]},"now":"2019-10-10T12:00:00.000Z"}
""")
    deserializer_convo = Deserializer[Conversation](Conversation) # type: ignore
    convo = deserializer_convo.from_string(case["convo"])
    deserializer_now = Deserializer[str](str) # type: ignore
    now = deserializer_now.from_string(case["now"])
    await ExtractMeetingRequestInfoImpl(
        convo=convo,
        now=now
    )


@baml.ClassifyIntent.test
async def test_probable_teal(ClassifyIntentImpl: IClassifyIntent):
    case = loads("""
{"query":"I want to schedule time on aaron's calendar?"}
""")
    deserializer_query = Deserializer[str](str) # type: ignore
    query = deserializer_query.from_string(case["query"])
    await ClassifyIntentImpl(
        query=query
    )


@baml.ClassifyIntent.test
async def test_witty_amethyst(ClassifyIntentImpl: IClassifyIntent):
    case = loads("""
{"query":"Can we meet later today?"}
""")
    deserializer_query = Deserializer[str](str) # type: ignore
    query = deserializer_query.from_string(case["query"])
    await ClassifyIntentImpl(
        query=query
    )


