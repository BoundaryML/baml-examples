# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..clients.client_main import Main
from ..functions.fx_getnextquestion import BAMLGetNextQuestion
from ..types.classes.cls_meetingrequestpartial import MeetingRequestPartial
from ..types.classes.cls_validation import Validation
from baml_lib._impl.deserializer import Deserializer


# Impl: v1
# Client: Main
# An implementation of .


__prompt_template = """\
Given the partial requirements, are the requirements complete?

Input:
```
{arg}
```

Output JSON:
{
  // True if there is enough information is filled out in the input. I don't need any more fields.
  "complete": bool,
  // If not complete, what question should be asked next? Try to gather as much information as possible in one question as this is answered in an email.
  "follow_up_question": string | null
}

JSON:\
"""

__input_replacers = {
    "{arg}"
}


# We ignore the type here because baml does some type magic to make this work
# for inline SpecialForms like Optional, Union, List.
__deserializer = Deserializer[Validation](Validation)  # type: ignore
__deserializer.overload("Validation", {"complete": "requirements_complete"})






@BAMLGetNextQuestion.register_impl("v1")
async def v1(arg: MeetingRequestPartial, /) -> Validation:
    response = await Main.run_prompt_template(template=__prompt_template, replacers=__input_replacers, params=dict(arg=arg))
    deserialized = __deserializer.from_string(response.generated)
    return deserialized
