/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { BamlRuntime, BamlCtxManager } from '@boundaryml/baml'
import { getBamlFiles } from './inlinedbaml'


export const DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME = BamlRuntime.fromFiles(
  'baml_src',
  getBamlFiles(),
  process.env
)
export const DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX = new BamlCtxManager(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


export function resetBamlEnvVars(envVars: Record<string, string | undefined>) {
  if (DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX.allowResets()) {
    const envVarsToReset = Object.fromEntries(Object.entries(envVars).filter((kv): kv is [string, string] => kv[1] !== undefined));
    DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME.reset('baml_src', getBamlFiles(), envVarsToReset)
    DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX.reset()
  } else {
    throw new Error('BamlError: Cannot reset BAML environment variables while there are active BAML contexts.')
  }
}

const patchedLoad = (originalFn: any) => (...args: any[]) => {
    const result = originalFn(...args);
    try {
        // Dont fail if env vars fail to reset
        resetBamlEnvVars(process.env);
    } catch (e) {
        console.error(e);
    }
    return result;
};

try {
  const dotenv = require('dotenv');
  // Monkeypatch load function to call resetBamlEnvVars after execution


    // Apply the patch
    dotenv.config = patchedLoad(dotenv.config);
    dotenv.configDotenv = patchedLoad(dotenv.configDotenv);
    dotenv.populate = patchedLoad(dotenv.populate);
} catch (error) {
  // dotenv is not installed, so we do nothing
}

// also patch process.loadEnvFile
if (process.loadEnvFile) {
    process.loadEnvFile = patchedLoad(process.loadEnvFile);
}